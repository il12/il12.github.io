{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\EditFragmentModal.svelte",
    "..\\..\\Fragment.svelte",
    "..\\..\\FragmentModal.svelte",
    "..\\..\\Main.svelte",
    "..\\..\\Modal.svelte",
    "..\\..\\Modifier.svelte",
    "..\\..\\ModifiersModal.svelte",
    "..\\..\\Content.svelte",
    "..\\..\\Fragment.svelte",
    "..\\..\\Head.svelte",
    "..\\..\\Modifier.svelte",
    "..\\..\\Print.svelte",
    "..\\..\\Total.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import Main from \"./Main.svelte\";\n    import Print from \"./Print/Print.svelte\"\n</script>\n<div style=\"font-size: medium; text-align: center; border: 1px red solid\">This is an alpha version of Difficulty calculator. It isn't optimized to mobile phones. This software tested primarily in Google Chrome browser. If you find any bugs (mistakes/errors), please, contact the developers by e-mail il5498@yandex.ru</div>\n<div class=\"app\">\n    <div style=\"font-size: xx-small\">v. 0.4.7</div>\n    <Main />\n</div>\n<div class=\"print\">\n    <Print />\n</div>\n\n<style>\n    @media print {\n        .print {\n            visibility: visible !important;\n            display: block !important;\n        }\n        :global(table) { page-break-inside:auto }\n        :global(tr)    { page-break-inside:avoid; page-break-after:auto }\n        :global(thead) { display:table-header-group }\n        .app{\n            display: none !important;\n        }\n        html, body {\n            width: 210mm;\n            height: 297mm;\n        }\n        *{\n            float:none !important;\n        }\n    }\n    .print{\n        visibility: hidden;\n    }\n    .app{\n        display: flex;\n    }\n\n\n\n    :global(.custom-select) {\n        display: inline-block;\n        width: 100%;\n        height: calc(1.5em + .75rem + 2px);\n        padding: .375rem 1.75rem .375rem .75rem;\n        font-size: 1rem;\n        font-weight: 400;\n        line-height: 1.5;\n        color: #495057;\n        vertical-align: middle;\n        background: #fff url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e\") no-repeat right .75rem center/8px 10px;\n        border: 1px solid #ced4da;\n        border-radius: .25rem;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n    }\n\n    :global(.custom-control-label::before, .custom-file-label, .custom-select){\n        transition: background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n    }\n\n    :global(.form-control) {\n        display: block;\n        width: 100%;\n        height: calc(1.5em + .75rem + 2px);\n        padding: .375rem .75rem;\n        font-size: 1rem;\n        font-weight: 400;\n        line-height: 1.5;\n        color: #495057;\n        background-color: #fff;\n        background-clip: padding-box;\n        border: 1px solid #ced4da;\n        border-radius: .25rem;\n        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;\n    }\n    :global(.form-check) {\n        position: relative;\n        display: block;\n        padding-left: 1.25rem;\n    }\n    :global(.form-check-input) {\n        position: absolute;\n        margin-top: .3rem;\n        margin-left: -1.25rem;\n    }\n    :global(.form-check-label) {\n        margin-bottom: 0;\n    }\n    :global(.btn) {\n        display: inline-block;\n        font-weight: 400;\n        color: #212529;\n        text-align: center;\n        vertical-align: middle;\n        cursor: pointer;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        background-color: transparent;\n        border: 1px solid transparent;\n        padding: .375rem .75rem;\n        font-size: 1rem;\n        line-height: 1.5;\n        border-radius: .25rem;\n        transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;\n    }\n\n    :global(.btn-primary) {\n        color: #fff;\n        background-color: #007bff;\n        border-color: #007bff;\n    }\n\n    :global(.btn-danger) {\n        color: #fff;\n        background-color: #dc3545;\n        border-color: #dc3545;\n    }\n    :global(.btn-outline-primary) {\n        color: #007bff;\n        border-color: #007bff;\n    }\n    :global(.form-control:invalid){\n        border-color: #dc3545;\n        padding-right: calc(1.5em + 0.75rem);\n        background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");\n        background-repeat: no-repeat;\n        background-position: right calc(0.375em + 0.1875rem) center;\n        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);\n    }\n    :global(.form-control:invalid:focus){\n        border-color: #dc3545;\n        box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n    }\n\n\n</style>",
    "<script>\r\n    import {onMount, onDestroy, setContext} from 'svelte'\r\n    import {get} from 'svelte/store'\r\n    import {modalStates, fragmentState, routineState} from './stores'\r\n    import {showModifierModal, hideEditFragmentModal} from './modals_visibility';\r\n    import {\r\n        calculateFragmentBasicMark,\r\n        calculateFragmentDifficulty,\r\n        calculateRoutineDifficulty,\r\n        calculateRoutineTime,\r\n        calculateHybridLevel,\r\n        calculateFragmentDuration\r\n    } from './calculations'\r\n    import Modal from './Modal.svelte'\r\n    import Modifier from './Modifier.svelte'\r\n\r\n    let autoModifiers\r\n    let fragmentModalVisibility\r\n    let modifierModalVisibility;\r\n    let inputType;\r\n    let inputStartTime;\r\n    let inputEndTime;\r\n    let inputMovements;\r\n    let inputLegs;\r\n    let inputDirection;\r\n    let inputSupport;\r\n    let inputRotations;\r\n\r\n    export let fragment;\r\n    export let index;\r\n\r\n    fragmentState.set(fragment);\r\n\r\n    onMount(async () => {\r\n        let data = await fetch('./modifiers.json').then(res => res.json());\r\n        autoModifiers = data.filter(item => {\r\n            return item.category === 'Auto' && item.type === fragment.type\r\n        });\r\n        checkAutoModifiers();\r\n    })\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n    })\r\n\r\n    const saveFragment = function () {\r\n        let fragment = get(fragmentState);\r\n        let program = get(routineState)\r\n        fragment.duration = calculateFragmentDuration(fragment);\r\n        if (fragment.type === 'hybrid') {\r\n            fragment.level = calculateHybridLevel(fragment)\r\n        }\r\n        fragment.basicMark = calculateFragmentBasicMark(fragment)\r\n        fragment.difficulty = calculateFragmentDifficulty(fragment, program.type);\r\n        $routineState.fragments = [...$routineState.fragments.slice(0, index), Object.assign({}, fragment), ...$routineState.fragments.slice(index + 1)];\r\n        $routineState.fragments = $routineState.fragments.sort((a, b) => a.startTime < b.startTime ? -1 : 1)\r\n        $routineState.mark = calculateRoutineDifficulty($routineState)\r\n        $routineState.duration = calculateRoutineTime($routineState)\r\n        hideEditFragmentModal();\r\n    }\r\n    const addModifier = function () {\r\n        if ((inputType && inputType.reportValidity()) &&\r\n                (inputStartTime && inputStartTime.reportValidity()) &&\r\n                (inputEndTime && inputEndTime.reportValidity()) &&\r\n                (!inputMovements || inputMovements.reportValidity()) &&\r\n                (!inputLegs || inputLegs.reportValidity()) &&\r\n                (!inputDirection || inputDirection.reportValidity()) &&\r\n                (!inputSupport || inputSupport.reportValidity()) &&\r\n                (!inputRotations || inputRotations.reportValidity())\r\n        ) {\r\n            showModifierModal()\r\n        }\r\n    }\r\n\r\n    const checkAutoModifiers = function () {\r\n        if ($fragmentState.type === 'hybrid') {\r\n            console.log('Modifiers 0:')\r\n            console.log($fragmentState.modifiers)\r\n            $fragmentState.modifiers = $fragmentState.modifiers.filter(modifier=>modifier.category!=='Auto')\r\n            console.log('Modifiers 1:')\r\n            console.log($fragmentState.modifiers)\r\n            let fragment = Object.assign({}, get(fragmentState))\r\n            fragment.duration = (calculateFragmentDuration(fragment));\r\n            let hybridLevel = Number(fragment.duration) < 20 ? (Number(fragment.duration) < 16 ? (Number(fragment.duration) < 10 ? (Number(fragment.duration) < 3 ? 0 : 0.1) : 0.2) : 0.3) : 0.4\r\n            let movementsLevel = $fragmentState.numberOfMovements < 31 ? ($fragmentState.numberOfMovements < 16 ? ($fragmentState.numberOfMovements < 6 ? ($fragmentState.numberOfMovements < 2 ? 0 : 0.1) : 0.2) : 0.3) : 0.4\r\n            let comparsion = hybridLevel === movementsLevel ? 'equal' : movementsLevel > hybridLevel\r\n            console.log($fragmentState.numberOfMovements < 6)\r\n            console.log(`Duration: ${fragment.duration}\\nMovements: ${$fragmentState.numberOfMovements}\\nhybridLevel: ${hybridLevel}\\nmovementsLevel: ${movementsLevel}`)\r\n            console.log(comparsion)\r\n            console.log(autoModifiers);\r\n            console.log($fragmentState.modifiers.indexOf(autoModifiers[0]));\r\n            console.log($fragmentState.modifiers.indexOf(autoModifiers[1]));\r\n            console.log($fragmentState.modifiers.indexOf(autoModifiers[2]));\r\n            if (comparsion !== 'equal') {\r\n                let modifier;\r\n                if (comparsion) {\r\n                    if ($fragmentState.modifiers.indexOf(autoModifiers[0]) !== -1) {\r\n                        removeModifier(autoModifiers[0])\r\n                    }\r\n                    modifier = autoModifiers[1];\r\n                } else {\r\n                    if ($fragmentState.modifiers.indexOf(autoModifiers[1]) !== -1) {\r\n                        removeModifier(autoModifiers[1])\r\n                    }\r\n                    modifier = autoModifiers[0]\r\n                }\r\n                console.log($fragmentState.modifiers.indexOf(modifier))\r\n                if ($fragmentState.modifiers.indexOf(modifier) === -1) {\r\n                    console.log(modifier);\r\n                    $fragmentState.modifiers = [...$fragmentState.modifiers, modifier];\r\n                }\r\n            } else {\r\n                if(movementsLevel !== 0.4) {\r\n                    if ($fragmentState.modifiers.indexOf(autoModifiers[1]) !== -1) {\r\n                        removeModifier(autoModifiers[1])\r\n                    }\r\n                    if ($fragmentState.modifiers.indexOf(autoModifiers[0]) !== -1) {\r\n                        removeModifier(autoModifiers[0])\r\n                    }\r\n                }\r\n                if(movementsLevel === 0.4){\r\n                    $fragmentState.modifiers = [...$fragmentState.modifiers, autoModifiers[1]];\r\n                }\r\n            }\r\n            if (fragment.duration > 20) {\r\n                if ($fragmentState.modifiers.indexOf(autoModifiers[2]) === -1) {\r\n                    $fragmentState.modifiers = [...$fragmentState.modifiers, autoModifiers[2]];\r\n                }\r\n            } else {\r\n                if ($fragmentState.modifiers.indexOf(autoModifiers[2]) !== -1) {\r\n                    removeModifier(autoModifiers[2])\r\n                }\r\n            }\r\n            console.log('Modifiers 2:')\r\n            console.log($fragmentState.modifiers)\r\n        }\r\n    }\r\n\r\n    const removeModifier = function (modifier) {\r\n        let index = $fragmentState.modifiers.findIndex(el => el === modifier);\r\n        $fragmentState.modifiers = [...$fragmentState.modifiers.slice(0, index), ...$fragmentState.modifiers.slice(index + 1)]\r\n    }\r\n</script>\r\n\r\n<Modal on:close=\"{hideEditFragmentModal}\" z_index=1>\r\n    <div slot=\"header\">\r\n        <div class=\"col\">\r\n            <h2>Edit Fragment №{index+1}</h2>\r\n        </div>\r\n    </div>\r\n    <div slot=\"body\" class=\"container\">\r\n        <div class=\"form\">\r\n            <label>Type\r\n                <select disabled required bind:this={inputType} bind:value={$fragmentState.type}\r\n                        class=\"custom-select\">\r\n                    <option value=\"hybrid\">Hybrid</option>\r\n                    <option value=\"transition\">Transition</option>\r\n                    {#if $routineState.type !== \"solo\"}\r\n                        <option value=\"pair acrobatics\">Pair acrobatics</option>\r\n                    {/if}\r\n                </select>\r\n            </label>\r\n            <div style=\"display: flex; flex-direction: row\">\r\n                <label for=\"startTime\">Start time</label>\r\n                <input id=\"startTime\" required bind:this={inputStartTime} bind:value={$fragmentState.startTime}\r\n                       pattern=\"[0-9]:[0-9][0-9]\" placeholder=\"0:00\"\r\n                       on:change={checkAutoModifiers}\r\n                       class=\"form-control\">\r\n                <label for=\"endTime\">End time</label>\r\n                <input id=\"endTime\" required bind:this={inputEndTime} bind:value={$fragmentState.endTime}\r\n                       pattern=\"[0-9]:[0-9][0-9]\" placeholder=\"0:00\"\r\n                       on:change={checkAutoModifiers}\r\n                       class=\"form-control\">\r\n            </div>\r\n            {#if $fragmentState.type === \"pair acrobatics\"}\r\n                <label>Direction\r\n                    <select required bind:this={inputDirection} bind:value={$fragmentState.direction}\r\n                            class=\"custom-select\">\r\n                        <option disabled value>Choose...</option>\r\n                        <option value=\"{0.1}\">Heads up</option>\r\n                        <option value=\"{0.2}\">Legs up</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>Support type\r\n                    <select required bind:this={inputSupport} bind:value={$fragmentState.support} class=\"custom-select\">\r\n                        <option disabled value>Choose...</option>\r\n                        <option value=\"{0}\">Lift</option>\r\n                        <option value=\"{0.1}\">Throw</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>360° Rotations\r\n                    <input required bind:this={inputRotations} bind:value={$fragmentState.rotations} type=\"number\"\r\n                           min=\"0\"\r\n                           class=\"form-control\">\r\n                </label>\r\n            {/if}\r\n            {#if $fragmentState.type === \"hybrid\"}\r\n                <label>Number of Movements\r\n                    <input required bind:this={inputMovements} bind:value={$fragmentState.numberOfMovements}\r\n                           on:change={checkAutoModifiers}\r\n                           class='form-control' min=\"0\" type=\"number\">\r\n                </label>\r\n                <label>Legs\r\n                    <select required bind:this={inputLegs} bind:value={$fragmentState.legs} class=\"custom-select\">\r\n                        <option disabled value>Choose...</option>\r\n                        <option value=\"1\">One leg (raising or lifting)</option>\r\n                        <option value=\"2\">Two legs (raising or lifting)</option>\r\n                    </select>\r\n                </label>\r\n            {/if}\r\n            <button on:click=\"{addModifier}\" class=\"btn btn-outline-primary\">Add additional movement</button>\r\n        </div>\r\n        <div class=\"modifiers\">\r\n            {#each $fragmentState.modifiers as modifier}\r\n                <Modifier>\r\n                    <div slot=\"header\">\r\n                        {modifier[\"category\"]}\r\n                    </div>\r\n                    <div slot=\"body\">\r\n                        {modifier.name}\r\n                    </div>\r\n                    <div slot=\"footer\">\r\n                        Score: {modifier[\"values\"][$routineState.type]}\r\n                    </div>\r\n                    <div class=\"close-button\" slot=\"footer\" on:click={()=>removeModifier(modifier)}>\r\n                        &times;\r\n                    </div>\r\n                </Modifier>\r\n            {:else}\r\n                <div>\r\n                    Additional movements will be here.\r\n                </div>\r\n            {/each}\r\n        </div>\r\n    </div>\r\n    <div slot=\"footer\" class=\"footer\">\r\n        <button on:click=\"{saveFragment}\" class=\"btn btn-primary\">Confirm</button>\r\n        <button on:click=\"{hideEditFragmentModal}\" class=\"btn btn-danger\">Dismiss</button>\r\n    </div>\r\n</Modal>\r\n\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    .footer {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    button {\r\n        display: block;\r\n        margin-left: 5px;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    .modifiers {\r\n        display: grid;\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-template-columns: repeat(4, 1fr);\r\n    }\r\n</style>\r\n",
    "<script>\r\n</script>\r\n\r\n<div class=\"fragment\" on:click>\r\n    <div class=\"header\">\r\n        <slot name=\"header\" />\r\n    </div>\r\n    <div class=\"body\">\r\n        <slot name=\"body\" />\r\n    </div>\r\n    <div class=\"footer\">\r\n        <slot name=\"footer\" />\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .fragment{\r\n        margin: 5px 5px;\r\n        position: relative;\r\n        display: -ms-flexbox;\r\n        display: flex;\r\n        -ms-flex-direction: column;\r\n        flex-direction: column;\r\n        min-width: 0;\r\n        word-wrap: break-word;\r\n        background-color: #fff;\r\n        background-clip: border-box;\r\n        border: 1px solid blue;\r\n        border-radius: .25rem;\r\n    }\r\n    .header{\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n    .body{\r\n        font-weight: bolder;\r\n        display: grid;\r\n        grid-template-columns: 1fr;\r\n        text-transform: uppercase;\r\n        text-align: center;\r\n    }\r\n    .footer{\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n        padding: 5px;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import {onMount, onDestroy, setContext} from 'svelte'\r\n    import {get} from 'svelte/store'\r\n    import {modalStates, fragmentState, routineState} from './stores'\r\n    import {showModifierModal, hideFragmentModal, showFragmentModal} from './modals_visibility';\r\n    import {\r\n        calculateFragmentBasicMark,\r\n        calculateFragmentDifficulty,\r\n        calculateRoutineDifficulty,\r\n        calculateRoutineTime,\r\n        calculateHybridLevel,\r\n        calculateFragmentDuration\r\n    } from './calculations'\r\n    import Modal from './Modal.svelte'\r\n    import Modifier from './Modifier.svelte'\r\n\r\n    let autoModifiers;\r\n    let fragment = get(fragmentState);\r\n    let fragmentModalVisibility\r\n    let modifierModalVisibility;\r\n    let inputType;\r\n    let inputStartTime;\r\n    let inputEndTime;\r\n    let inputMovements;\r\n    let inputLegs;\r\n    let inputDirection;\r\n    let inputSupport;\r\n    let inputRotations;\r\n\r\n    onMount(async () => {\r\n        $fragmentState.startTime = $routineState.fragments[$routineState.fragments.length-1].endTime;\r\n        $fragmentState.endTime = null;\r\n        $fragmentState.numberOfMovements = null;\r\n        $fragmentState.legs = null;\r\n        $fragmentState.basicMark = 0;\r\n        $fragmentState.direction =null;\r\n        $fragmentState.support = null;\r\n        $fragmentState.rotations = null;\r\n        $fragmentState.difficulty = 0;\r\n        $fragmentState.modifiers = [];\r\n        let data = await fetch('./modifiers.json').then(res => res.json());\r\n        console.log(data);\r\n        autoModifiers = data.filter(item => {\r\n            return item.category === 'Auto';\r\n        });\r\n\r\n    })\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n    })\r\n\r\n    const saveFragment = function () {\r\n        let fragment = get(fragmentState);\r\n        let program = get(routineState)\r\n        fragment.duration = calculateFragmentDuration(fragment);\r\n        if (fragment.type === 'hybrid') {\r\n            fragment.level = calculateHybridLevel(fragment)\r\n        }\r\n        fragment.basicMark = calculateFragmentBasicMark(fragment)\r\n        fragment.difficulty = calculateFragmentDifficulty(fragment, program.type);\r\n        $routineState.fragments = [...program.fragments, Object.assign({}, fragment)];\r\n        $routineState.fragments = $routineState.fragments.sort((a, b) => a.startTime < b.startTime ? -1 : 1)\r\n        $routineState.mark = calculateRoutineDifficulty($routineState)\r\n        $routineState.duration = calculateRoutineTime($routineState)\r\n        hideFragmentModal();\r\n    }\r\n    const addModifier = function () {\r\n        if ((inputType && inputType.reportValidity()) &&\r\n                (inputStartTime && inputStartTime.reportValidity()) &&\r\n                (inputEndTime && inputEndTime.reportValidity()) &&\r\n                (!inputMovements || inputMovements.reportValidity()) &&\r\n                (!inputLegs || inputLegs.reportValidity()) &&\r\n                (!inputDirection || inputDirection.reportValidity()) &&\r\n                (!inputSupport || inputSupport.reportValidity()) &&\r\n                (!inputRotations || inputRotations.reportValidity())\r\n        ) {\r\n            showModifierModal()\r\n        }\r\n    }\r\n    const removeModifier = function (modifier) {\r\n        let index = $fragmentState.modifiers.findIndex(el => el === modifier);\r\n        $fragmentState.modifiers = [...$fragmentState.modifiers.slice(0, index), ...$fragmentState.modifiers.slice(index + 1)]\r\n    }\r\n    const checkAutoModifiers = function () {\r\n        if ($fragmentState.type === 'hybrid') {\r\n            let fragment = Object.assign({}, get(fragmentState))\r\n            fragment.duration = (calculateFragmentDuration(fragment));\r\n            let hybridLevel = calculateHybridLevel(fragment);\r\n            hybridLevel = hybridLevel === \"easy\" ? (hybridLevel === \"hard\" ? 0.3 : 0.2) : 0.1;\r\n            let movementsLevel = $fragmentState.numberOfMovements < 31 ? ($fragmentState.numberOfMovements < 16 ? ($fragmentState.numberOfMovements < 6 ? ($fragmentState.numberOfMovements < 2 ? 0: 0.1) : 0.2) : 0.3) : 0.4\r\n            let comparsion = hybridLevel === movementsLevel ? 'equal' : movementsLevel > hybridLevel\r\n            console.log(comparsion)\r\n            console.log(autoModifiers);\r\n            console.log($fragmentState.modifiers.indexOf(autoModifiers[0]));\r\n            console.log($fragmentState.modifiers.indexOf(autoModifiers[1]));\r\n            console.log($fragmentState.modifiers.indexOf(autoModifiers[2]));\r\n            if (comparsion !== 'equal') {\r\n                let modifier;\r\n                if (comparsion) {\r\n                    if ($fragmentState.modifiers.indexOf(autoModifiers[0]) !== -1) {\r\n                        removeModifier(autoModifiers[0])\r\n                    }\r\n                    modifier = autoModifiers[1];\r\n                } else {\r\n                    if ($fragmentState.modifiers.indexOf(autoModifiers[1]) !== -1) {\r\n                        removeModifier(autoModifiers[1])\r\n                    }\r\n                    modifier = autoModifiers[0]\r\n                }\r\n                console.log($fragmentState.modifiers.indexOf(modifier))\r\n                if ($fragmentState.modifiers.indexOf(modifier) === -1) {\r\n                    console.log(modifier);\r\n                    $fragmentState.modifiers = [...$fragmentState.modifiers, modifier];\r\n                }\r\n            } else {\r\n                if ($fragmentState.modifiers.indexOf(autoModifiers[1]) !== -1) {\r\n                    removeModifier(autoModifiers[1])\r\n                }\r\n                if ($fragmentState.modifiers.indexOf(autoModifiers[0]) !== -1) {\r\n                    removeModifier(autoModifiers[0])\r\n                }\r\n            }\r\n            if (fragment.duration > 20) {\r\n                if ($fragmentState.modifiers.indexOf(autoModifiers[2]) === -1) {\r\n                    $fragmentState.modifiers = [...$fragmentState.modifiers, autoModifiers[2]];\r\n                }\r\n            } else {\r\n                if ($fragmentState.modifiers.indexOf(autoModifiers[2]) !== -1) {\r\n                    removeModifier(autoModifiers[2])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const rerenderModal = function () {\r\n        $fragmentState.duration = null;\r\n        $fragmentState.numberOfMovements = null\r\n        $fragmentState.legs = null;\r\n        $fragmentState.basicMark = 0;\r\n        $fragmentState.direction = null;\r\n        $fragmentState.support = null;\r\n        $fragmentState.rotations = 0;\r\n        $fragmentState.difficulty = 0;\r\n        $fragmentState.modifiers = [];\r\n    }\r\n</script>\r\n\r\n<Modal on:close=\"{hideFragmentModal}\" z_index=1>\r\n    <div slot=\"header\">\r\n        <div class=\"col\">\r\n            <h2>New Fragment</h2>\r\n        </div>\r\n    </div>\r\n    <div slot=\"body\" class=\"container\">\r\n        <div class=\"form\">\r\n            <label>Type\r\n                <select required on:change={rerenderModal} bind:this={inputType} bind:value={$fragmentState.type}\r\n                        class=\"custom-select\">\r\n                    <option selected disabled value>Choose...</option>\r\n                    <option value=\"hybrid\">Hybrid</option>\r\n                    <option value=\"transition\">Transition</option>\r\n                    {#if $routineState.type !== \"solo\"}\r\n                        <option value=\"pair acrobatics\">Pair acrobatics</option>\r\n                    {/if}\r\n                </select>\r\n            </label>\r\n            <div style=\"display: flex; flex-direction: row\">\r\n                <label for=\"startTime\">Start time</label>\r\n                <input id=\"startTime\" required bind:this={inputStartTime} bind:value={$fragmentState.startTime}\r\n                       on:change={checkAutoModifiers}\r\n                       pattern=\"[0-9]:[0-9][0-9]\" placeholder=\"0:00\"\r\n                       class=\"form-control\">\r\n                <label for=\"endTime\">End time</label>\r\n                <input id=\"endTime\" required bind:this={inputEndTime} bind:value={$fragmentState.endTime}\r\n                       on:change={checkAutoModifiers}\r\n                       pattern=\"[0-9]:[0-9][0-9]\" placeholder=\"0:00\"\r\n                       class=\"form-control\">\r\n            </div>\r\n            {#if $fragmentState.type === \"pair acrobatics\"}\r\n                <label>Direction\r\n                    <select required bind:this={inputDirection} bind:value={$fragmentState.direction}\r\n                            class=\"custom-select\">\r\n                        <option disabled value>Choose...</option>\r\n                        <option value=\"{0.1}\">Heads up</option>\r\n                        <option value=\"{0.2}\">Legs up</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>Support type\r\n                    <select required bind:this={inputSupport} bind:value={$fragmentState.support} class=\"custom-select\">\r\n                        <option disabled value>Choose...</option>\r\n                        <option value=\"{0}\">Lift</option>\r\n                        <option value=\"{0.1}\">Throw</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>360° Rotations\r\n                    <input required bind:this={inputRotations} bind:value={$fragmentState.rotations} type=\"number\"\r\n                           min=\"0\"\r\n                           class=\"form-control\">\r\n                </label>\r\n            {/if}\r\n            {#if $fragmentState.type === \"hybrid\"}\r\n                <label>Number of Movements\r\n                    <input required bind:this={inputMovements} bind:value={$fragmentState.numberOfMovements} min=\"0\"\r\n                           on:change={checkAutoModifiers}\r\n                           class='form-control' type=\"number\">\r\n                </label>\r\n                <label>Legs\r\n                    <select required bind:this={inputLegs} bind:value={$fragmentState.legs} class=\"custom-select\">\r\n                        <option disabled value>Choose...</option>\r\n                        <option value=\"1\">One leg (raising or lifting)</option>\r\n                        <option value=\"2\">Two legs (raising or lifting)</option>\r\n                    </select>\r\n                </label>\r\n            {/if}\r\n            <button on:click=\"{addModifier}\" class=\"btn btn-outline-primary\">Add additional movement</button>\r\n        </div>\r\n        <div class=\"modifiers\">\r\n            {#each $fragmentState.modifiers as modifier}\r\n                <Modifier>\r\n                    <div slot=\"header\" >\r\n                        {modifier[\"category\"]}\r\n                    </div>\r\n                    <div slot=\"body\" >\r\n                        {modifier.name}\r\n                    </div>\r\n                    <div slot=\"footer\" >\r\n                            Score: {modifier[\"values\"][$routineState.type]}\r\n                    </div>\r\n                    <div class=\"close-button\" slot=\"footer\" on:click={()=>removeModifier(modifier)}>\r\n                        &times;\r\n                    </div>\r\n                </Modifier>\r\n            {:else}\r\n                <div>\r\n                    Additional movements will be here.\r\n                </div>\r\n            {/each}\r\n        </div>\r\n    </div>\r\n    <div slot=\"footer\" class=\"footer\">\r\n        <button on:click=\"{saveFragment}\" class=\"btn btn-primary\">Save</button>\r\n        <button on:click=\"{hideFragmentModal}\" class=\"btn btn-danger\">Dismiss</button>\r\n    </div>\r\n</Modal>\r\n\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    .footer {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    button {\r\n        display: block;\r\n        margin-left: 5px;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    .modifiers {\r\n        display: grid;\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-template-columns: repeat(4, 1fr);\r\n    }\r\n\r\n</style>\r\n",
    "<script>\r\n    import {onMount} from 'svelte'\r\n    import {modalStates, routineState} from './stores';\r\n    import {calculateRoutineDifficulty,calculateRoutineTime} from './calculations'\r\n    import {showFragmentModal, showEditFragmentModal} from './modals_visibility';\r\n    import FragmentModal from \"./FragmentModal.svelte\";\r\n    import ModifierModal from \"./ModifiersModal.svelte\";\r\n    import EditFragmentModal from \"./EditFragmentModal.svelte\"\r\n    import Fragment from './Fragment.svelte'\r\n\r\n    let fragmentModalVisibility\r\n    let modifierModalVisibility;\r\n    let editFragmentModalVisibility;\r\n    let inputHighDiffPatternModifier;\r\n    let routineUniqueModifiers;\r\n    let editingFragment;\r\n    let editingFragmentIndex;\r\n\r\n    let inputFile;\r\n    let inputName;\r\n    let inputType;\r\n    let inputCountry;\r\n    let inputCompetition;\r\n    let inputDate;\r\n\r\n    onMount(async () => {\r\n        routineUniqueModifiers = await fetch('./routine_unique_modifiers.json').then(res => res.json());\r\n    })\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n        editFragmentModalVisibility = state.editFragmentModalVisibility;\r\n    })\r\n\r\n    let printForm = function () {\r\n        if (inputName.reportValidity() && inputType.reportValidity() && inputCountry.reportValidity() && inputCompetition.reportValidity() && inputDate.reportValidity()) {\r\n            window.print()\r\n        }\r\n    }\r\n\r\n    let editHighDiffPatternModifier = function () {\r\n        console.log($routineState);\r\n        if (inputHighDiffPatternModifier.checked) {\r\n            $routineState.unique_modifiers = [routineUniqueModifiers[0]]\r\n        } else {\r\n            $routineState.unique_modifiers = []\r\n        }\r\n        $routineState.mark = calculateRoutineDifficulty($routineState);\r\n    }\r\n\r\n\r\n    let removeFragment = function (index) {\r\n        $routineState.fragments = [...$routineState.fragments.slice(0, index), ...$routineState.fragments.slice(index + 1)]\r\n        $routineState.mark = calculateRoutineDifficulty($routineState);\r\n        $routineState.duration = calculateRoutineTime($routineState)\r\n    }\r\n\r\n    let editFragment = function (fragment, index) {\r\n        editingFragment = fragment;\r\n        editingFragmentIndex = index;\r\n        showEditFragmentModal();\r\n    }\r\n\r\n    let saveDataset = function () {\r\n        let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify($routineState));\r\n        let dlAnchorElem = document.getElementById('downloadAnchorElem');\r\n        dlAnchorElem.setAttribute(\"href\", dataStr);\r\n        dlAnchorElem.setAttribute(\"download\", `${$routineState.type}_${$routineState.country}_${$routineState.name}.asd`);\r\n        dlAnchorElem.click();\r\n    }\r\n\r\n    let loadFile = function () {\r\n        let reader = new FileReader();\r\n        let data;\r\n        reader.addEventListener('load', (event) => {\r\n            data = event.target.result;\r\n            routineState.set(JSON.parse(data));\r\n        });\r\n        reader.readAsText(inputFile.files[0]);\r\n    }\r\n</script>\r\n\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <label>Routine\r\n            <select bind:this={inputType} bind:value={$routineState.type} class=\"custom-select\" required>\r\n                <option disabled value>Choose...</option>\r\n                <option value=\"solo\">Solo</option>\r\n                <option value=\"duet\">Duet</option>\r\n                <option value=\"team\">Team</option>\r\n            </select>\r\n        </label>\r\n        <div>Load .asd file\r\n            <div>\r\n                <button on:click={()=>inputFile.click()} style=\"width: 100%\" class=\"btn btn-outline-primary\">\r\n                    Press here to select .asd file from your computer\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <input bind:this={inputFile} on:change={loadFile} type=\"file\" accept=\".asd\"\r\n               hidden>\r\n    </div>\r\n    <div class=\"row\">\r\n        <label>Country\r\n            <input bind:this={inputCountry} bind:value={$routineState.country} class=\"form-control\" type=\"text\"\r\n                   required>\r\n        </label>\r\n        <label>Name of the athlete or team\r\n            <input bind:this={inputName} bind:value={$routineState.name} class=\"form-control\" type=\"text\" required>\r\n        </label>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <label>Name of the competition\r\n            <input bind:this={inputCompetition} bind:value={$routineState.competition} class=\"form-control\" type=\"text\"\r\n                   required>\r\n        </label>\r\n        <label>Date\r\n            <input bind:this={inputDate} bind:value={$routineState.date} class=\"form-control\" type=\"date\" required>\r\n        </label>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div>\r\n            <label>Duration\r\n                <input bind:value={$routineState.duration} class=\"form-control\" disabled type=\"text\">\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <label>Difficulty\r\n                <input bind:value={$routineState.mark} class=\"form-control\" disabled type=\"text\">\r\n            </label>\r\n        </div>\r\n    </div>\r\n    {#if $routineState.type}\r\n        <div class=\"row\">\r\n            <button on:click={saveDataset} class=\"btn btn-outline-primary\">Press here to get .asd file</button>\r\n            <button on:click={printForm} class=\"btn btn-outline-primary \">Press here to print report</button>\r\n        </div>\r\n        <div class=\"row-flex\">\r\n            <button on:click=\"{showFragmentModal}\" class=\"btn btn-primary\">Press here to add new\r\n                part of the routine\r\n            </button>\r\n        </div>\r\n    {/if}\r\n    {#if $routineState.type === \"team\"}\r\n        <div>\r\n            <div class=\"form-check\">\r\n                <input bind:this={inputHighDiffPatternModifier} on:change={editHighDiffPatternModifier} id=\"team-unique\"\r\n                       type=\"checkbox\" class=\"form-check-input\">\r\n                <label for=\"team-unique\" class=\"form-check-label\">Hight level difficulty pattern\r\n                    changes\r\n                    (moving patterns, passing through patterns, close spaced, quick and sharp\r\n                    surface changes)\r\n                </label>\r\n            </div>\r\n        </div>\r\n    {/if}\r\n    <div class='fragments'>\r\n        {#each $routineState.fragments as fragment,id}\r\n            <Fragment on:click={()=>editFragment(fragment,id)}>\r\n                <div slot=\"header\">\r\n                    №{id+1}\r\n                </div>\r\n                <div slot=\"header\">\r\n                    {fragment.duration} sec.\r\n                </div>\r\n                <div slot=\"body\">\r\n                    {fragment.type}\r\n                </div>\r\n                <div slot=\"body\">\r\n                    {fragment.startTime} - {fragment.endTime}\r\n                </div>\r\n                <div slot=\"footer\">\r\n                    Diff.: {fragment.difficulty}\r\n                </div>\r\n                <div class=\"close-button\" slot=\"footer\" on:click={(event)=>{event.stopPropagation(); removeFragment(id)}}>\r\n                    &times;\r\n                </div>\r\n            </Fragment>\r\n        {/each}\r\n    </div>\r\n</div>\r\n\r\n{#if fragmentModalVisibility}\r\n    <FragmentModal/>\r\n{/if}\r\n{#if modifierModalVisibility}\r\n    <ModifierModal/>\r\n{/if}\r\n{#if editFragmentModalVisibility}\r\n    <EditFragmentModal fragment={editingFragment} index={editingFragmentIndex}/>\r\n{/if}\r\n\r\n<a id=\"downloadAnchorElem\" style=\"display:none\">&nbsp</a>\r\n\r\n<style>\r\n    .close-button {\r\n        cursor: pointer;\r\n    }\r\n\r\n    input:disabled {\r\n        color: black;\r\n        background-color: deepskyblue;\r\n        font-weight: 800;\r\n    }\r\n\r\n    div {\r\n        text-transform: inherit;\r\n        text-align: inherit;\r\n        font-weight: inherit;\r\n    }\r\n\r\n    .container {\r\n        width: 40%;\r\n        margin-right: auto;\r\n        margin-left: auto;\r\n    }\r\n\r\n    .fragments {\r\n        display: grid;\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-template-columns: repeat(3, 1fr);\r\n    }\r\n\r\n    .row {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-column-gap: 10px;\r\n    }\r\n\r\n    .row-flex {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n</style>",
    "<script>\r\n    import { createEventDispatcher,onMount, onDestroy, getContext} from 'svelte';\r\n    export let z_index = 1;\r\n\r\n    const dispatch = createEventDispatcher();\r\n    const close = () => dispatch('close');\r\n\r\n    let modal;\r\n\r\n\r\n    const handle_keydown = e => {\r\n        if (e.key === 'Escape') {\r\n            close();\r\n            return;\r\n        }\r\n\r\n        if (e.key === 'Tab') {\r\n            // trap focus\r\n            const nodes = modal.querySelectorAll('*');\r\n            const tabbable = Array.from(nodes).filter(n => n.tabIndex >= 0);\r\n\r\n            let index = tabbable.indexOf(document.activeElement);\r\n            if (index === -1 && e.shiftKey) index = 0;\r\n\r\n            index += tabbable.length + (e.shiftKey ? -1 : 1);\r\n            index %= tabbable.length;\r\n\r\n            tabbable[index].focus();\r\n            e.preventDefault();\r\n        }\r\n    };\r\n\r\n    const previously_focused = typeof document !== 'undefined' && document.activeElement;\r\n\r\n    if (previously_focused) {\r\n        onDestroy(() => {\r\n            previously_focused.focus();\r\n        });\r\n    }\r\n</script>\r\n\r\n<svelte:window on:keydown={handle_keydown}/>\r\n\r\n<div class=\"modal-background\"></div>\r\n\r\n<div class=\"modal\" role=\"dialog\" aria-modal=\"true\" bind:this={modal} style=\"--z_index:{z_index}\">\r\n    <slot name=\"header\"/>\r\n    <hr>\r\n    <slot name=\"body\"/>\r\n    <hr>\r\n    <slot name=\"footer\"/>\r\n    <!-- svelte-ignore a11y-autofocus -->\r\n</div>\r\n\r\n<style>\r\n    .modal-background {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(0,0,0,0.3);\r\n    }\r\n\r\n    .modal {\r\n        z-index: var(--z_index);\r\n        position: absolute;\r\n        left: 50%; top: 50%;\r\n        width: calc(100vw - 4em);\r\n        max-width: 75em;\r\n        max-height: calc(100vh - 4em);\r\n        overflow: auto;\r\n        transform: translate(-50%,-50%);\r\n        padding: 1em;\r\n        border-radius: 0.2em;\r\n        background: white;\r\n    }\r\n\r\n    .footer{\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n    }\r\n</style>\r\n",
    "<script>\r\n</script>\r\n\r\n<div class=\"modifier\" on:click>\r\n    <div class=\"header\">\r\n        <slot name=\"header\" />\r\n    </div>\r\n    <div class=\"body\">\r\n        <slot name=\"body\" />\r\n    </div>\r\n    <div class=\"footer\">\r\n        <slot name=\"footer\" />\r\n    </div>\r\n\r\n</div>\r\n\r\n<style>\r\n    .modifier{\r\n        margin: 5px 5px;\r\n        position: relative;\r\n        display: -ms-flexbox;\r\n        display: flex;\r\n        -ms-flex-direction: column;\r\n        flex-direction: column;\r\n        min-width: 0;\r\n        word-wrap: break-word;\r\n        background-color: #fff;\r\n        background-clip: border-box;\r\n        border: 1px solid blue;\r\n        border-radius: .25rem;\r\n    }\r\n\r\n    .header {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n\r\n    .body {\r\n        font-weight: bolder;\r\n        flex: 1 1 auto;\r\n        min-height: 1px;\r\n        padding: 5px;\r\n    }\r\n\r\n    .footer {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n        padding: 5px;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import {modalStates, routineState, fragmentState} from './stores'\r\n    import {get} from 'svelte/store'\r\n    import {onMount, onDestroy} from 'svelte'\r\n    import Modal from \"./Modal.svelte\";\r\n    import {hideModifierModal} from './modals_visibility'\r\n    import Modifier from \"./Modifier.svelte\";\r\n\r\n    let fragmentModalVisibility;\r\n    let modifierModalVisibility;\r\n    let modifiers = [];\r\n\r\n    onMount(async () => {\r\n        let program = get(routineState);\r\n        let data = await fetch('./modifiers.json').then(res => res.json());\r\n        modifiers = data.filter(item => {\r\n            return item.type === $fragmentState.type && item[\"values\"][program.type] !== null && item.category !== 'Auto'\r\n        });\r\n    })\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n    })\r\n\r\n    const addModifier = function (modifier) {\r\n        $fragmentState.modifiers = [...$fragmentState.modifiers, modifier];\r\n        hideModifierModal();\r\n    }\r\n    /*\r\n*/\r\n</script>\r\n\r\n\r\n<Modal on:close=\"{hideModifierModal}\" z_index=2>\r\n    <div slot=\"header\">\r\n        <div>\r\n            New Modifier\r\n        </div>\r\n    </div>\r\n    <div slot=\"body\" class=\"modifiers-table\">\r\n        {#each modifiers as modifier}\r\n            <Modifier on:click={()=>addModifier(modifier)}>\r\n                <div slot=\"header\" class=\"modifier-header\">\r\n                    {modifier[\"category\"]}\r\n                </div>\r\n                <div slot=\"body\" class=\"modifier-body\">\r\n                    {modifier.name}\r\n                </div>\r\n                <div slot=\"footer\" class=\"modifier-footer\">\r\n                        Score: {modifier[\"values\"][$routineState.type]}\r\n                </div>\r\n            </Modifier>\r\n        {:else}\r\n            Loading...\r\n        {/each}\r\n    </div>\r\n    <div slot=\"footer\">\r\n        <button on:click=\"{hideModifierModal}\" class=\"btn btn-danger\">Dismiss</button>\r\n    </div>\r\n</Modal>\r\n\r\n<style>\r\n    .modifiers-table {\r\n        display: grid;\r\n        grid-template-columns: repeat(5, 1fr);\r\n    }\r\n\r\n    .modifier-header {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n\r\n    .modifier-body {\r\n        font-weight: bolder;\r\n        flex: 1 1 auto;\r\n        min-height: 1px;\r\n        padding: 5px;\r\n    }\r\n\r\n    .modifier-footer {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n</style>",
    "<script>\r\n    import {get} from 'svelte/store'\r\n    import {routineState} from \"../stores\"\r\n    import Fragment from \"./Fragment.svelte\"\r\n\r\n    let program = Object.assign({}, get(routineState));\r\n    console.log(program);\r\n</script>\r\n\r\n<table class=\"collapse w-17 m-default\">\r\n    <thead>\r\n    <tr>\r\n        <th class=\"w-1 border\">Start</th>\r\n        <th class=\"w-1 border\">End</th>\r\n        <th class=\"w-2 border\">Duration</th>\r\n        <th class=\"w-5 border\">Description</th>\r\n        <th class=\"w-1 border\">MARK</th>\r\n        <th colspan=\"3\" class=\"w-3 border\">Expert</th>\r\n    </tr>\r\n    </thead>\r\n    {#each $routineState.fragments as fragment}\r\n        <Fragment fragment={fragment}/>\r\n    {/each}\r\n</table>\r\n\r\n<style>\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n\r\n    .w-1 {\r\n        width: 1.5cm;\r\n    }\r\n\r\n    .w-2 {\r\n        width: 2.5cm;\r\n    }\r\n\r\n    .w-5 {\r\n        width: 5cm;\r\n    }\r\n\r\n    .w-17 {\r\n        width: 17cm;\r\n    }\r\n\r\n    .collapse {\r\n        border-collapse: collapse;\r\n        word-break: break-all\r\n    }\r\n</style>",
    "<script>\r\n    import Modifier from \"./Modifier.svelte\"\r\n    export let fragment\r\n</script>\r\n\r\n<tr>\r\n    <td class=\"border shade text-bold\">{fragment.startTime}</td>\r\n    <td class=\"border shade text-bold\">{fragment.endTime}</td>\r\n    <td class=\"border shade text-bold\">{fragment.duration} sec.</td>\r\n    <td class=\"border shade capitalize text-bold\">{fragment.type}</td>\r\n    <td class=\"border shade text-bold\">{fragment.difficulty}</td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n</tr>\r\n{#if fragment.type===\"hybrid\"}\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td class=\"border capitalize text-bold\">Level</td>\r\n        <td class=\"border capitalize\">{fragment.level}</td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td class=\"border capitalize text-bold\">Movements</td>\r\n        <td class=\"border capitalize\">{fragment.numberOfMovements}</td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td class=\"border capitalize text-bold\">Basic Mark</td>\r\n        <td class=\"border capitalize\">{fragment.legs} legs</td>\r\n        <td class=\"border\">{fragment.basicMark}</td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n    </tr >\r\n{/if}\r\n{#each fragment.modifiers as modifier}\r\n    <Modifier modifier={modifier} />\r\n{/each}\r\n\r\n<style>\r\n    .text-bold{\r\n        font-weight: bold;\r\n    }\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n    .capitalize{\r\n        text-transform: capitalize;\r\n    }\r\n    .shade{\r\n        background-color: #c0c0c0;\r\n    }\r\n</style>\r\n",
    "<script>\r\n    import {routineState} from \"../stores\"\r\n</script>\r\n\r\n<table class=\"collapse w-17\">\r\n    <thead>\r\n    <tr>\r\n        <th colspan=\"5\" style=\"width: 17cm; border: 1px solid black\">ARTISTIC SWIMMING DIFFICULTY FORM</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr>\r\n        <td class=\"text-left w-3\">EVENT:</td>\r\n        <td class=\"border text-left w-1 text-bold uppercase\">{$routineState.type}</td>\r\n        <td class=\"text-right w-3\">PLACE:</td>\r\n        <td class=\"border text-left w-5 text-bold\">{$routineState.competition}</td>\r\n    </tr>\r\n    <tr>\r\n        <td class=\"text-left w-3\">COUNTRY:</td>\r\n        <td class=\"border text-left w-1 text-bold uppercase\">{$routineState.country}</td>\r\n        <td class=\"text-right w-3\">DATE:</td>\r\n        <td class=\"border text-left w-5 text-bold\">{$routineState.date}</td>\r\n    </tr>\r\n    <tr>\r\n        <td class=\"text-left w-3\">NAME:</td>\r\n        <td class=\"border text-left w-5 text-bold\">{$routineState.name}</td>\r\n        <td class=\"text-right w-3\">Start List №</td>\r\n        <td class=\"border text-left w-5 text-bold\"></td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<style>\r\n    .uppercase{\r\n        text-transform: uppercase;\r\n    }\r\n\r\n    .text-right {\r\n        text-align: right;\r\n    }\r\n\r\n    .text-bold {\r\n        font-weight: bold;\r\n    }\r\n\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n\r\n    .w-1 {\r\n        width: 1.5cm;\r\n    }\r\n\r\n    .w-3 {\r\n        width: 3cm;\r\n    }\r\n\r\n    .w-5 {\r\n        width: 5.5cm;\r\n    }\r\n\r\n    .w-17 {\r\n        width: 17cm;\r\n    }\r\n\r\n    .collapse{\r\n        border-collapse: collapse;\r\n    }\r\n</style>",
    "<script>\r\n    import {routineState} from \"../stores\"\r\n\r\n    export let modifier\r\n</script>\r\n\r\n<tr>\r\n    <td colspan=\"2\" class=\"border\">{modifier.category}</td>\r\n    <td colspan=\"2\" class=\"border\">{modifier.name}</td>\r\n    <td class=\"border\">{modifier.values[$routineState.type]}</td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n</tr>\r\n\r\n<style>\r\n    .text-bold{\r\n        font-weight: bold;\r\n    }\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n    .capitalize{\r\n        text-transform: capitalize;\r\n    }\r\n</style>",
    "<script>\r\n    import Header from './Head.svelte'\r\n    import Total from './Total.svelte'\r\n    import Program from './Content.svelte'\r\n</script>\r\n\r\n<div class=\"container\">\r\n    <div class=\"flex-item\">\r\n        <Header />\r\n    </div>\r\n    <div class=\"flex-item\">\r\n        <Total />\r\n    </div>\r\n    <div class=\"flex-item\">\r\n        <Program />\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .flex-item{\r\n        margin-bottom: 0.5cm;\r\n    }\r\n</style>",
    "<script>\r\n    import {routineState} from \"../stores\"\r\n</script>\r\n\r\n<table class=\"w-5 m-default collapse\">\r\n    <thead>\r\n    <tr>\r\n        <td class=\"w-3 border text-bold\">TOTAL DIFF:</td>\r\n        <td class=\"w-2 border\">{$routineState.mark}</td>\r\n    </tr>\r\n    </thead>\r\n</table>\r\n\r\n<style>\r\n    .text-bold {\r\n        font-weight: bold;\r\n    }\r\n\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n\r\n    .w-2 {\r\n        width: 2.5cm;\r\n    }\r\n\r\n    .w-3 {\r\n        width: 3cm;\r\n    }\r\n\r\n    .w-5 {\r\n        width: 5.5cm;\r\n    }\r\n\r\n    .collapse{\r\n        border-collapse: collapse;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAcI,OAAO,KAAK,AAAC,CAAC,AACV,MAAM,cAAC,CAAC,AACJ,UAAU,CAAE,OAAO,CAAC,UAAU,CAC9B,OAAO,CAAE,KAAK,CAAC,UAAU,AAC7B,CAAC,AACO,KAAK,AAAE,CAAC,AAAC,kBAAkB,IAAI,CAAC,CAAC,AACjC,EAAE,AAAK,CAAC,AAAC,kBAAkB,KAAK,CAAE,iBAAiB,IAAI,CAAC,CAAC,AACzD,KAAK,AAAE,CAAC,AAAC,QAAQ,kBAAkB,CAAC,CAAC,AAC7C,kBAAI,CAAC,AACD,OAAO,CAAE,IAAI,CAAC,UAAU,AAC5B,CAAC,AAKD,cAAC,CAAC,AACE,MAAM,IAAI,CAAC,UAAU,AACzB,CAAC,AACL,CAAC,AACD,oBAAM,CAAC,AACH,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,kBAAI,CAAC,AACD,OAAO,CAAE,IAAI,AACjB,CAAC,AAIO,cAAc,AAAE,CAAC,AACrB,OAAO,CAAE,YAAY,CACrB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,OAAO,CAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CACvC,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,IAAI,CAAC,IAAI,yKAAyK,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CACtO,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,MAAM,CACrB,kBAAkB,CAAE,IAAI,CACxB,eAAe,CAAE,IAAI,CACrB,UAAU,CAAE,IAAI,AACpB,CAAC,AAEO,iEAAiE,AAAC,CAAC,AACvE,UAAU,CAAE,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,AAC3G,CAAC,AAEO,aAAa,AAAE,CAAC,AACpB,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,OAAO,CAAE,OAAO,CAAC,MAAM,CACvB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OAAO,CACd,gBAAgB,CAAE,IAAI,CACtB,eAAe,CAAE,WAAW,CAC5B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,MAAM,CACrB,UAAU,CAAE,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,AACzE,CAAC,AACO,WAAW,AAAE,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,KAAK,CACd,YAAY,CAAE,OAAO,AACzB,CAAC,AACO,iBAAiB,AAAE,CAAC,AACxB,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,QAAQ,AACzB,CAAC,AACO,iBAAiB,AAAE,CAAC,AACxB,aAAa,CAAE,CAAC,AACpB,CAAC,AACO,IAAI,AAAE,CAAC,AACX,OAAO,CAAE,YAAY,CACrB,WAAW,CAAE,GAAG,CAChB,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,MAAM,CACtB,MAAM,CAAE,OAAO,CACf,mBAAmB,CAAE,IAAI,CACzB,gBAAgB,CAAE,IAAI,CACtB,eAAe,CAAE,IAAI,CACrB,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,WAAW,CAC7B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAC7B,OAAO,CAAE,OAAO,CAAC,MAAM,CACvB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,aAAa,CAAE,MAAM,CACrB,UAAU,CAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,AACrI,CAAC,AAEO,YAAY,AAAE,CAAC,AACnB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,OAAO,CACzB,YAAY,CAAE,OAAO,AACzB,CAAC,AAEO,WAAW,AAAE,CAAC,AAClB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,OAAO,CACzB,YAAY,CAAE,OAAO,AACzB,CAAC,AACO,oBAAoB,AAAE,CAAC,AAC3B,KAAK,CAAE,OAAO,CACd,YAAY,CAAE,OAAO,AACzB,CAAC,AACO,qBAAqB,AAAC,CAAC,AAC3B,YAAY,CAAE,OAAO,CACrB,aAAa,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CACpC,gBAAgB,CAAE,IAAI,qTAAqT,CAAC,CAC5U,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,KAAK,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAC3D,eAAe,CAAE,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,AACpE,CAAC,AACO,2BAA2B,AAAC,CAAC,AACjC,YAAY,CAAE,OAAO,CACrB,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,AACpD,CAAC;AC4GD,UAAU,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,AAClC,CAAC,AAED,OAAO,cAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,QAAQ,AAC7B,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,KAAK,CACd,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,GAAG,AACrB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC;AC5PD,uBAAS,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,WAAW,CACpB,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,MAAM,CAC1B,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,CAAC,CACZ,SAAS,CAAE,UAAU,CACrB,gBAAgB,CAAE,IAAI,CACtB,eAAe,CAAE,UAAU,CAC3B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,MAAM,AACzB,CAAC,AACD,qBAAO,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AAC7C,CAAC,AACD,mBAAK,CAAC,AACF,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAC1B,cAAc,CAAE,SAAS,CACzB,UAAU,CAAE,MAAM,AACtB,CAAC,AACD,qBAAO,CAAC,AACJ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACzC,OAAO,CAAE,GAAG,AAChB,CAAC;ACuMD,UAAU,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,AAClC,CAAC,AAED,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,QAAQ,AAC7B,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,OAAO,CAAE,KAAK,CACd,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,GAAG,AACrB,CAAC,AAED,UAAU,eAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC;AC5ED,aAAa,cAAC,CAAC,AACX,MAAM,CAAE,OAAO,AACnB,CAAC,AAED,mBAAK,SAAS,AAAC,CAAC,AACZ,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,WAAW,CAC7B,WAAW,CAAE,GAAG,AACpB,CAAC,AAED,GAAG,cAAC,CAAC,AACD,cAAc,CAAE,OAAO,CACvB,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,OAAO,AACxB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,KAAK,CAAE,GAAG,CACV,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AAED,IAAI,cAAC,CAAC,AACF,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,eAAe,CAAE,IAAI,AACzB,CAAC,AAED,SAAS,cAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AAC1B,CAAC;ACnLD,iBAAiB,cAAC,CAAC,AACf,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAC/B,CAAC,AAED,MAAM,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,SAAS,CAAC,CACvB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CAAE,GAAG,CAAE,GAAG,CACnB,KAAK,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CACxB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAC7B,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,UAAU,IAAI,CAAC,IAAI,CAAC,CAC/B,OAAO,CAAE,GAAG,CACZ,aAAa,CAAE,KAAK,CACpB,UAAU,CAAE,KAAK,AACrB,CAAC;AC3DD,wBAAS,CAAC,AACN,MAAM,CAAE,GAAG,CAAC,GAAG,CACf,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,WAAW,CACpB,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,MAAM,CAC1B,cAAc,CAAE,MAAM,CACtB,SAAS,CAAE,CAAC,CACZ,SAAS,CAAE,UAAU,CACrB,gBAAgB,CAAE,IAAI,CACtB,eAAe,CAAE,UAAU,CAC3B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,MAAM,AACzB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AAC7C,CAAC,AAED,KAAK,eAAC,CAAC,AACH,WAAW,CAAE,MAAM,CACnB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,GAAG,CACf,OAAO,CAAE,GAAG,AAChB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,eAAe,CAAE,aAAa,CAC9B,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CACzC,OAAO,CAAE,GAAG,AAChB,CAAC;ACWD,gBAAgB,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,AACzC,CAAC,AAED,gBAAgB,eAAC,CAAC,AACd,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AAC7C,CAAC,AAED,cAAc,eAAC,CAAC,AACZ,WAAW,CAAE,MAAM,CACnB,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CACd,UAAU,CAAE,GAAG,CACf,OAAO,CAAE,GAAG,AAChB,CAAC,AAED,gBAAgB,eAAC,CAAC,AACd,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AAC7C,CAAC;AC3DD,OAAO,eAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC3B,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,GAAG,AACd,CAAC,AAED,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,AACf,CAAC,AAED,SAAS,eAAC,CAAC,AACP,eAAe,CAAE,QAAQ,CACzB,UAAU,CAAE,SAAS;IACzB,CAAC;ACGD,wBAAU,CAAC,AACP,WAAW,CAAE,IAAI,AACrB,CAAC,AACD,OAAO,cAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC3B,CAAC,AACD,yBAAW,CAAC,AACR,cAAc,CAAE,UAAU,AAC9B,CAAC,AACD,oBAAM,CAAC,AACH,gBAAgB,CAAE,OAAO,AAC7B,CAAC;AC9BD,yBAAU,CAAC,AACP,cAAc,CAAE,SAAS,AAC7B,CAAC,AAED,WAAW,eAAC,CAAC,AACT,UAAU,CAAE,KAAK,AACrB,CAAC,AAED,UAAU,eAAC,CAAC,AACR,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC3B,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,GAAG,AACd,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,AACf,CAAC,AAED,wBAAS,CAAC,AACN,eAAe,CAAE,QAAQ,AAC7B,CAAC;AChDD,OAAO,cAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC3B,CAAC;ACFD,wBAAU,CAAC,AACP,aAAa,CAAE,KAAK,AACxB,CAAC;ACPD,UAAU,eAAC,CAAC,AACR,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC3B,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,GAAG,AACd,CAAC,AAED,IAAI,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,wBAAS,CAAC,AACN,eAAe,CAAE,QAAQ,AAC7B,CAAC"
}