{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores.js","../../src/calculations.js","../../src/modals_visibility.js","../../src/Modal.svelte","../../src/FragmentModal.svelte","../../src/ModifiersModal.svelte","../../src/EditFragmentModal.svelte","../../src/Main.svelte","../../src/Print/Head.svelte","../../src/Print/Total.svelte","../../src/Print/Modifier.svelte","../../src/Print/Fragment.svelte","../../src/Print/Content.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value' || descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j];\n                if (attributes[attribute.name]) {\n                    j++;\n                }\n                else {\n                    node.removeAttribute(attribute.name);\n                }\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    if (value != null || input.value) {\n        input.value = value;\n    }\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    let unsubscribe;\n    if (is_crossorigin()) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        detach(iframe);\n        if (unsubscribe)\n            unsubscribe();\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(html, anchor = null) {\n        this.e = element('div');\n        this.a = anchor;\n        this.u(html);\n    }\n    m(target, anchor = null) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(target, this.n[i], anchor);\n        }\n        this.t = target;\n    }\n    u(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    p(html) {\n        this.d();\n        this.u(html);\n        this.m(this.t, this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next, lookup.has(block.key));\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if ($$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.21.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import {writable} from 'svelte/store';\r\n\r\nexport const modalStates = writable({\r\n    fragmentModalVisibility: false,\r\n    modifierModalVisibility: false,\r\n    editFragmentModalVisibility: false\r\n})\r\n\r\nexport const routineState = writable({\r\n    type: \"\",\r\n    name: \"\",\r\n    country: \"\",\r\n    competition: \"\",\r\n    date: \"\",\r\n    mark: \"0.0\",\r\n    duration: \"00:00\",\r\n    fragments: [],\r\n    unique_modifiers: []\r\n})\r\n\r\nexport const fragmentState = writable({\r\n    type: \"hybrid\",\r\n    startTime: null,\r\n    endTime: null,\r\n    duration: null,\r\n    basicMark: 0,\r\n    //ONLY FOR HYBRIDS\r\n    level: null,\r\n    numberOfMovements: null,\r\n    legs: null,\r\n    //ONLY FOR PAIR ACROBATICS\r\n    direction: null,\r\n    support: null,\r\n    rotations: null,\r\n    //Difficulty calculates WITH basicMark\r\n    difficulty: 0,\r\n    modifiers: []\r\n})","export const calculateHybridLevel = function(fragment){\r\n    console.log(fragment.duration);\r\n    return Number(fragment.duration) < 16 ? (Number(fragment.duration) < 10 ? 'easy' : 'medium') : 'hard';\r\n}\r\nexport const calculateFragmentDuration = function(fragment){\r\n    const startTimeInSeconds = Number(fragment.startTime.split(':')[0])*60+Number(fragment.startTime.split(':')[1])\r\n    const endTimeInSeconds = Number(fragment.endTime.split(':')[0])*60+Number(fragment.endTime.split(':')[1])\r\n    return endTimeInSeconds-startTimeInSeconds;\r\n}\r\n\r\nexport const calculateFragmentBasicMark = function(fragment){\r\n    if(fragment.type === 'transition'){\r\n        return 0.1;\r\n    } else if (fragment.type === 'hybrid'){\r\n        let legs = fragment.legs;\r\n        let durationType = fragment.level !== \"hard\" ? (fragment.level !== 'medium' ? 0.1 : 0.2) : 0.3;\r\n        return Number(durationType * legs).toFixed(2);\r\n    } else if (fragment.type === 'pair acrobatics'){\r\n        let direction = fragment.direction\r\n        let rotations = fragment.rotations;\r\n        let support = fragment.support;\r\n        return Number(support+direction+rotations * 0.1).toFixed(2);\r\n    }\r\n}\r\n\r\nexport const calculateFragmentDifficulty = function (fragment,programType) {\r\n    let modifiersArray = fragment.modifiers.filter(item=>{\r\n        return !item.unique\r\n    });\r\n    let uniqueModifiersArray = Array.from(new Set(fragment.modifiers.filter(item=>{\r\n        return item.unique && !item.multiplier\r\n    })));\r\n    let multipliers = fragment.modifiers.filter(item=>{\r\n        return item.multiplier\r\n    });\r\n\r\n    let modifiersMark = modifiersArray.reduce((accumulator,currentValue)=>{\r\n        return accumulator+=currentValue.values[programType];\r\n    }, 0);\r\n    let uniqueModifiersMark = uniqueModifiersArray.reduce((accumulator,currentValue)=>{\r\n        return accumulator+=currentValue.values[programType];\r\n    }, 0);\r\n\r\n    let mark = Number(fragment.basicMark) + Number(modifiersMark) + Number(uniqueModifiersMark);\r\n    if(multipliers.length !== 0){\r\n        let multipliersArray = multipliers.map((item)=>item.values[programType]);\r\n        for(let multiplier of multipliersArray){\r\n            mark*=multiplier;\r\n        }\r\n    }\r\n    return Number(mark).toFixed(2)\r\n}\r\n\r\nexport const calculateRoutineDifficulty = function (routine) {\r\n    let overallDifficulty = 0\r\n    if(routine.fragments.length !== 0 ) {\r\n        routine.fragments.forEach((fragment) => {\r\n            overallDifficulty += Number(fragment.difficulty);\r\n        }, 0)\r\n        if (routine.fragments[routine.fragments.length - 1].type === 'hybrid') {\r\n            overallDifficulty += Number(routine.fragments[routine.fragments.length - 1].level === \"easy\" ?\r\n                (routine.fragments[routine.fragments.length - 1].level === \"hard\" ? 0.3 : 0.2) : 0.1);\r\n        }\r\n    }\r\n    if(routine.unique_modifiers.length !== 0){\r\n        routine.unique_modifiers.forEach((item)=>{\r\n            overallDifficulty += item.values[routine.type]\r\n        })\r\n    }\r\n    return Number(overallDifficulty).toFixed(2)\r\n}\r\n\r\nexport const calculateRoutineTime = function (program) {\r\n    let overallTime = program.fragments.reduce((accumulator,fragment)=>{\r\n        return accumulator+=Number(fragment.duration);\r\n    },0)\r\n    let seconds = String(overallTime % 60).padStart(2,'0');\r\n    let minutes = String(Math.floor(overallTime/60)).padStart(2,'0');\r\n    return `${minutes}:${seconds}`\r\n}","import {modalStates} from \"./stores\";\r\n\r\nexport const hideModifierModal = function () {\r\n    modalStates.update(state => {\r\n        state.modifierModalVisibility = false;\r\n        return state;\r\n    })\r\n}\r\n\r\nexport const showModifierModal = function () {\r\n    modalStates.update(state => {\r\n        state.modifierModalVisibility = true;\r\n        return state;\r\n    })\r\n}\r\n\r\nexport const hideFragmentModal = function () {\r\n    modalStates.update(state => {\r\n        state.fragmentModalVisibility = false;\r\n        return state;\r\n    })\r\n}\r\n\r\nexport const showFragmentModal = function () {\r\n    modalStates.update(state => {\r\n        state.fragmentModalVisibility = true\r\n        console.log(state);\r\n        return state;\r\n    })\r\n}\r\n\r\nexport const showEditFragmentModal = function(){\r\n    modalStates.update(state => {\r\n        state.editFragmentModalVisibility = true\r\n        console.log(state);\r\n        return state;\r\n    })\r\n}\r\n\r\n\r\nexport const hideEditFragmentModal = function(){\r\n    modalStates.update(state => {\r\n        state.editFragmentModalVisibility = false;\r\n        console.log(state);\r\n        return state;\r\n    })\r\n}","<script>\r\n    import { createEventDispatcher,onMount, onDestroy, getContext} from 'svelte';\r\n    export let z_index = 1;\r\n\r\n    const dispatch = createEventDispatcher();\r\n    const close = () => dispatch('close');\r\n\r\n    let modal;\r\n\r\n\r\n    const handle_keydown = e => {\r\n        if (e.key === 'Escape') {\r\n            close();\r\n            return;\r\n        }\r\n\r\n        if (e.key === 'Tab') {\r\n            // trap focus\r\n            const nodes = modal.querySelectorAll('*');\r\n            const tabbable = Array.from(nodes).filter(n => n.tabIndex >= 0);\r\n\r\n            let index = tabbable.indexOf(document.activeElement);\r\n            if (index === -1 && e.shiftKey) index = 0;\r\n\r\n            index += tabbable.length + (e.shiftKey ? -1 : 1);\r\n            index %= tabbable.length;\r\n\r\n            tabbable[index].focus();\r\n            e.preventDefault();\r\n        }\r\n    };\r\n\r\n    const previously_focused = typeof document !== 'undefined' && document.activeElement;\r\n\r\n    if (previously_focused) {\r\n        onDestroy(() => {\r\n            previously_focused.focus();\r\n        });\r\n    }\r\n</script>\r\n\r\n<svelte:window on:keydown={handle_keydown}/>\r\n\r\n<div class=\"modal-background\" on:click={close}></div>\r\n\r\n<div class=\"modal\" role=\"dialog\" aria-modal=\"true\" bind:this={modal} style=\"--z_index:{z_index}\">\r\n    <slot name=\"header\"/>\r\n    <hr>\r\n    <slot name=\"body\"/>\r\n    <hr>\r\n    <slot name=\"footer\"/>\r\n    <!-- svelte-ignore a11y-autofocus -->\r\n</div>\r\n\r\n<style>\r\n    .modal-background {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background: rgba(0,0,0,0.3);\r\n    }\r\n\r\n    .modal {\r\n        z-index: var(--z_index);\r\n        position: absolute;\r\n        left: 50%; top: 50%;\r\n        width: calc(100vw - 4em);\r\n        max-width: 75em;\r\n        max-height: calc(100vh - 4em);\r\n        overflow: auto;\r\n        transform: translate(-50%,-50%);\r\n        padding: 1em;\r\n        border-radius: 0.2em;\r\n        background: white;\r\n    }\r\n\r\n    .footer{\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n    }\r\n</style>\r\n","<script>\r\n    import {onMount, onDestroy, setContext} from 'svelte'\r\n    import {get} from 'svelte/store'\r\n    import {modalStates, fragmentState, routineState} from './stores'\r\n    import {showModifierModal, hideFragmentModal, showFragmentModal} from './modals_visibility';\r\n    import {\r\n        calculateFragmentBasicMark,\r\n        calculateFragmentDifficulty,\r\n        calculateRoutineDifficulty,\r\n        calculateRoutineTime,\r\n        calculateHybridLevel,\r\n        calculateFragmentDuration\r\n    } from './calculations'\r\n    import Modal from './Modal.svelte'\r\n    import Modifier from './Modifier.svelte'\r\n\r\n    let fragment = get(fragmentState);\r\n    let fragmentModalVisibility\r\n    let modifierModalVisibility;\r\n    let inputType;\r\n    let inputStartTime;\r\n    let inputEndTime;\r\n    let inputMovements;\r\n    let inputLegs;\r\n    let inputDirection;\r\n    let inputSupport;\r\n    let inputRotations;\r\n\r\n    onMount(() => {\r\n        $fragmentState.startTime = 0;\r\n        $fragmentState.endTime = 0;\r\n        $fragmentState.numberOfMovements = null;\r\n        $fragmentState.legs = 1;\r\n        $fragmentState.basicMark = 0;\r\n        $fragmentState.direction = 0;\r\n        $fragmentState.support = 0.1;\r\n        $fragmentState.rotations = 0;\r\n        $fragmentState.difficulty = 0;\r\n        $fragmentState.modifiers = [];\r\n    })\r\n\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n    })\r\n\r\n    const saveFragment = function () {\r\n        let fragment = get(fragmentState);\r\n        let program = get(routineState)\r\n        fragment.duration = calculateFragmentDuration(fragment);\r\n        if (fragment.type === 'hybrid') {\r\n            fragment.level = calculateHybridLevel(fragment)\r\n        }\r\n        fragment.basicMark = calculateFragmentBasicMark(fragment)\r\n        fragment.difficulty = calculateFragmentDifficulty(fragment, program.type);\r\n        $routineState.fragments = [...program.fragments, Object.assign({}, fragment)];\r\n        $routineState.mark = calculateRoutineDifficulty($routineState)\r\n        $routineState.duration = calculateRoutineTime($routineState)\r\n        hideFragmentModal();\r\n    }\r\n    const addModifier = function () {\r\n        if ((inputType && inputType.reportValidity()) &&\r\n                (inputStartTime && inputStartTime.reportValidity()) &&\r\n                (inputEndTime && inputEndTime.reportValidity()) &&\r\n                (!inputMovements || inputMovements.reportValidity()) &&\r\n                (!inputLegs || inputLegs.reportValidity()) &&\r\n                (!inputDirection || inputDirection.reportValidity()) &&\r\n                (!inputSupport || inputSupport.reportValidity()) &&\r\n                (!inputRotations || inputRotations.reportValidity())\r\n        ) {\r\n            showModifierModal()\r\n        }\r\n    }\r\n    const removeModifier = function (modifier) {\r\n        let index = $fragmentState.modifiers.findIndex(el => el === modifier);\r\n        $fragmentState.modifiers = [...$fragmentState.modifiers.slice(0, index), ...$fragmentState.modifiers.slice(index + 1)]\r\n    }\r\n    const rerenderModal = function () {\r\n        $fragmentState.duration = null;\r\n        $fragmentState.numberOfMovements = null\r\n        $fragmentState.legs = null;\r\n        $fragmentState.basicMark = 0;\r\n        $fragmentState.direction = 0;\r\n        $fragmentState.support = 0.1;\r\n        $fragmentState.rotations = 0;\r\n        $fragmentState.difficulty = 0;\r\n        $fragmentState.modifiers = [];\r\n    }\r\n</script>\r\n\r\n<Modal on:close=\"{hideFragmentModal}\" z_index=1>\r\n    <div slot=\"header\">\r\n        <div class=\"col\">\r\n            <h2>New Fragment</h2>\r\n        </div>\r\n    </div>\r\n    <div slot=\"body\" class=\"container\">\r\n        <div class=\"form\">\r\n            <label>Type\r\n                <select required on:change={rerenderModal} bind:this={inputType} bind:value={$fragmentState.type}\r\n                        class=\"custom-select\">\r\n                    <option value=\"hybrid\">Hybrid</option>\r\n                    <option value=\"transition\">Transition</option>\r\n                    {#if $routineState.type !== \"solo\"}\r\n                        <option value=\"pair acrobatics\">Pair acrobatics</option>\r\n                    {/if}\r\n                </select>\r\n            </label>\r\n            <div style=\"display: flex; flex-direction: row\">\r\n                <label for=\"duration\">Start time</label>\r\n                <input id=\"duration\" required bind:this={inputStartTime} bind:value={$fragmentState.startTime}\r\n                       type=\"time\"\r\n                       class=\"form-control\">\r\n                <label for=\"duration\">End time</label>\r\n                <input id=\"duration\" required bind:this={inputEndTime} bind:value={$fragmentState.endTime}\r\n                       type=\"time\"\r\n                       class=\"form-control\">\r\n            </div>\r\n            {#if $fragmentState.type === \"pair acrobatics\"}\r\n                <label>Direction\r\n                    <select required bind:this={inputDirection} bind:value={$fragmentState.direction}\r\n                            class=\"custom-select\">\r\n                        <option value=\"{0.1}\">Heads up</option>\r\n                        <option value=\"{0.2}\">Legs up</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>Support type\r\n                    <select required bind:this={inputSupport} bind:value={$fragmentState.support} class=\"custom-select\">\r\n                        <option value=\"{0}\">Lift</option>\r\n                        <option value=\"{0.1}\">Throw</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>360° Rotations\r\n                    <input required bind:this={inputRotations} bind:value={$fragmentState.rotations} type=\"number\"\r\n                           class=\"form-control\">\r\n                </label>\r\n            {/if}\r\n            {#if $fragmentState.type === \"hybrid\"}\r\n                <label>Number of Movements\r\n                    <input required bind:this={inputMovements} bind:value={$fragmentState.numberOfMovements}\r\n                           class='form-control' type=\"number\">\r\n                </label>\r\n                <label>Legs\r\n                    <select required bind:this={inputLegs} bind:value={$fragmentState.legs} class=\"custom-select\">\r\n                        <option value=\"1\">One leg (raising or lifting)</option>\r\n                        <option value=\"2\">Two legs (raising or lifting)</option>\r\n                    </select>\r\n                </label>\r\n            {/if}\r\n            <button on:click=\"{addModifier}\" class=\"btn btn-outline-primary\">Add modifier</button>\r\n        </div>\r\n        <div class=\"modifiers\">\r\n            {#each $fragmentState.modifiers as modifier}\r\n                <Modifier on:click={()=>removeModifier(modifier)}>\r\n                    <div slot=\"header\" class=\"modifier-header\">\r\n                        {modifier[\"category\"]}\r\n                    </div>\r\n                    <div slot=\"body\" class=\"modifier-body\">\r\n                        {modifier.name}\r\n                    </div>\r\n                    <div slot=\"footer\" class=\"modifier-footer\">\r\n                        {#if $fragmentState.type === 'hybrid'}\r\n                            {modifier[\"category\"]}: {modifier[\"values\"][$routineState.type]}\r\n                        {:else}\r\n                            Modifier: {modifier[\"values\"][$routineState.type]}\r\n                        {/if}\r\n                    </div>\r\n                </Modifier>\r\n            {:else}\r\n                <div>\r\n                    Your fragment modifiers will be here.\r\n                </div>\r\n            {/each}\r\n        </div>\r\n    </div>\r\n    <div slot=\"footer\" class=\"footer\">\r\n        <button on:click=\"{saveFragment}\" class=\"btn btn-primary\">Save</button>\r\n        <button on:click=\"{hideFragmentModal}\" class=\"btn btn-danger\">Dismiss</button>\r\n    </div>\r\n</Modal>\r\n\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    .footer {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    button {\r\n        display: block;\r\n        margin-left: 5px;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    .modifiers {\r\n        display: grid;\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-template-columns: repeat(4, 1fr);\r\n    }\r\n\r\n    .modifier-header {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n\r\n    .modifier-body {\r\n        font-weight: bolder;\r\n        flex: 1 1 auto;\r\n        min-height: 1px;\r\n        padding: 5px;\r\n    }\r\n\r\n    .modifier-footer {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n</style>\r\n","<script>\r\n    import {modalStates, routineState, fragmentState} from './stores'\r\n    import {get} from 'svelte/store'\r\n    import {onMount, onDestroy} from 'svelte'\r\n    import Modal from \"./Modal.svelte\";\r\n    import {hideModifierModal} from './modals_visibility'\r\n    import Modifier from \"./Modifier.svelte\";\r\n\r\n    let fragmentModalVisibility;\r\n    let modifierModalVisibility;\r\n    let modifiers = [];\r\n\r\n    onMount(async () => {\r\n        let program = get(routineState);\r\n        let data = await fetch('./modifiers.json').then(res => res.json());\r\n        modifiers = data.filter(item => {\r\n            return item.type === $fragmentState.type && item[\"values\"][program.type] !== null\r\n        });\r\n    })\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n    })\r\n\r\n    const addModifier = function (modifier) {\r\n        $fragmentState.modifiers = [...$fragmentState.modifiers, modifier];\r\n        hideModifierModal();\r\n    }\r\n    /*\r\n*/\r\n</script>\r\n\r\n\r\n<Modal on:close=\"{hideModifierModal}\" z_index=2>\r\n    <div slot=\"header\">\r\n        <div>\r\n            New Modifier\r\n        </div>\r\n    </div>\r\n    <div slot=\"body\" class=\"modifiers-table\">\r\n        {#each modifiers as modifier}\r\n            <Modifier on:click={()=>addModifier(modifier)}>\r\n                <div slot=\"header\" class=\"modifier-header\">\r\n                    {modifier[\"category\"]}\r\n                </div>\r\n                <div slot=\"body\" class=\"modifier-body\">\r\n                    {modifier.name}\r\n                </div>\r\n                <div slot=\"footer\" class=\"modifier-footer\">\r\n                    {#if $fragmentState.type === 'hybrid'}\r\n                        {modifier[\"category\"]}: {modifier[\"values\"][$routineState.type]}\r\n                    {:else}\r\n                        Modifier: {modifier[\"values\"][$routineState.type]}\r\n                    {/if}\r\n                </div>\r\n            </Modifier>\r\n        {:else}\r\n            Loading...\r\n        {/each}\r\n    </div>\r\n    <div slot=\"footer\">\r\n        <button on:click=\"{hideModifierModal}\" class=\"btn btn-danger\">Dismiss</button>\r\n    </div>\r\n</Modal>\r\n\r\n<style>\r\n    .modifiers-table {\r\n        display: grid;\r\n        grid-template-columns: repeat(5, 1fr);\r\n    }\r\n\r\n    .modifier-header {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n\r\n    .modifier-body {\r\n        font-weight: bolder;\r\n        flex: 1 1 auto;\r\n        min-height: 1px;\r\n        padding: 5px;\r\n    }\r\n\r\n    .modifier-footer {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n</style>","<script>\r\n    import {onMount, onDestroy, setContext} from 'svelte'\r\n    import {get} from 'svelte/store'\r\n    import {modalStates, fragmentState, routineState} from './stores'\r\n    import {showModifierModal, hideEditFragmentModal} from './modals_visibility';\r\n    import {\r\n        calculateFragmentBasicMark,\r\n        calculateFragmentDifficulty,\r\n        calculateRoutineDifficulty,\r\n        calculateRoutineTime,\r\n        calculateHybridLevel,\r\n        calculateFragmentDuration\r\n    } from './calculations'\r\n    import Modal from './Modal.svelte'\r\n    import Modifier from './Modifier.svelte'\r\n\r\n    let fragmentModalVisibility\r\n    let modifierModalVisibility;\r\n    let inputType;\r\n    let inputStartTime;\r\n    let inputEndTime;\r\n    let inputMovements;\r\n    let inputLegs;\r\n    let inputDirection;\r\n    let inputSupport;\r\n    let inputRotations;\r\n\r\n    export let fragment;\r\n    export let index;\r\n\r\n    fragmentState.set(fragment);\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n    })\r\n\r\n    const saveFragment = function () {\r\n        let fragment = get(fragmentState);\r\n        let program = get(routineState)\r\n        fragment.duration = calculateFragmentDuration(fragment);\r\n        if (fragment.type === 'hybrid') {\r\n            fragment.level = calculateHybridLevel(fragment)\r\n        }\r\n        fragment.basicMark = calculateFragmentBasicMark(fragment)\r\n        fragment.difficulty = calculateFragmentDifficulty(fragment, program.type);\r\n        $routineState.fragments = [...$routineState.fragments.slice(0, index), Object.assign({},fragment), ...$routineState.fragments.slice(index + 1)];\r\n        $routineState.mark = calculateRoutineDifficulty($routineState)\r\n        $routineState.duration = calculateRoutineTime($routineState)\r\n        hideEditFragmentModal();\r\n    }\r\n    const addModifier = function () {\r\n        if ((inputType && inputType.reportValidity()) &&\r\n                (inputStartTime && inputStartTime.reportValidity()) &&\r\n                (inputEndTime && inputEndTime.reportValidity()) &&\r\n                (!inputMovements || inputMovements.reportValidity()) &&\r\n                (!inputLegs || inputLegs.reportValidity()) &&\r\n                (!inputDirection || inputDirection.reportValidity()) &&\r\n                (!inputSupport || inputSupport.reportValidity()) &&\r\n                (!inputRotations || inputRotations.reportValidity())\r\n        ) {\r\n            showModifierModal()\r\n        }\r\n    }\r\n    const removeModifier = function (modifier) {\r\n        let index = $fragmentState.modifiers.findIndex(el => el === modifier);\r\n        $fragmentState.modifiers = [...$fragmentState.modifiers.slice(0, index), ...$fragmentState.modifiers.slice(index + 1)]\r\n    }\r\n</script>\r\n\r\n<Modal on:close=\"{hideEditFragmentModal}\" z_index=1>\r\n    <div slot=\"header\">\r\n        <div class=\"col\">\r\n            <h2>Edit Fragment</h2>\r\n        </div>\r\n    </div>\r\n    <div slot=\"body\" class=\"container\">\r\n        <div class=\"form\">\r\n            <label>Type\r\n                <select disabled required bind:this={inputType} bind:value={$fragmentState.type}\r\n                        class=\"custom-select\">\r\n                    <option value=\"hybrid\">Hybrid</option>\r\n                    <option value=\"transition\">Transition</option>\r\n                    {#if $routineState.type !== \"solo\"}\r\n                        <option value=\"pair acrobatics\">Pair acrobatics</option>\r\n                    {/if}\r\n                </select>\r\n            </label>\r\n            <div style=\"display: flex; flex-direction: row\">\r\n                <label for=\"duration\">Start time</label>\r\n                <input id=\"duration\" required bind:this={inputStartTime} bind:value={$fragmentState.startTime}\r\n                       type=\"time\"\r\n                       class=\"form-control\">\r\n                <label for=\"duration\">End time</label>\r\n                <input id=\"duration\" required bind:this={inputEndTime} bind:value={$fragmentState.endTime}\r\n                       type=\"time\"\r\n                       class=\"form-control\">\r\n            </div>\r\n            {#if $fragmentState.type === \"pair acrobatics\"}\r\n                <label>Direction\r\n                    <select required bind:this={inputDirection} bind:value={$fragmentState.direction}\r\n                            class=\"custom-select\">\r\n                        <option value=\"{0.1}\">Heads up</option>\r\n                        <option value=\"{0.2}\">Legs up</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>Support type\r\n                    <select required bind:this={inputSupport} bind:value={$fragmentState.support} class=\"custom-select\">\r\n                        <option value=\"{0}\">Lift</option>\r\n                        <option value=\"{0.1}\">Throw</option>\r\n                    </select>\r\n                </label>\r\n\r\n                <label>360° Rotations\r\n                    <input required bind:this={inputRotations} bind:value={$fragmentState.rotations} type=\"number\"\r\n                           class=\"form-control\">\r\n                </label>\r\n            {/if}\r\n            {#if $fragmentState.type === \"hybrid\"}\r\n                <label>Number of Movements\r\n                    <input required bind:this={inputMovements} bind:value={$fragmentState.numberOfMovements}\r\n                           class='form-control' type=\"number\">\r\n                </label>\r\n                <label>Legs\r\n                    <select required bind:this={inputLegs} bind:value={$fragmentState.legs} class=\"custom-select\">\r\n                        <option value=\"1\">One leg (raising or lifting)</option>\r\n                        <option value=\"2\">Two legs (raising or lifting)</option>\r\n                    </select>\r\n                </label>\r\n            {/if}\r\n            <button on:click=\"{addModifier}\" class=\"btn btn-outline-primary\">Add modifier</button>\r\n        </div>\r\n        <div class=\"modifiers\">\r\n            {#each $fragmentState.modifiers as modifier}\r\n                <Modifier on:click={()=>removeModifier(modifier)}>\r\n                    <div slot=\"header\" class=\"modifier-header\">\r\n                        {modifier[\"category\"]}\r\n                    </div>\r\n                    <div slot=\"body\" class=\"modifier-body\">\r\n                        {modifier.name}\r\n                    </div>\r\n                    <div slot=\"footer\" class=\"modifier-footer\">\r\n                        {#if $fragmentState.type === 'hybrid'}\r\n                            {modifier[\"category\"]}: {modifier[\"values\"][$routineState.type]}\r\n                        {:else}\r\n                            Modifier: {modifier[\"values\"][$routineState.type]}\r\n                        {/if}\r\n                    </div>\r\n                </Modifier>\r\n            {:else}\r\n                <div>\r\n                    Your fragment modifiers will be here.\r\n                </div>\r\n            {/each}\r\n        </div>\r\n    </div>\r\n    <div slot=\"footer\" class=\"footer\">\r\n        <button on:click=\"{saveFragment}\" class=\"btn btn-primary\">Confirm</button>\r\n        <button on:click=\"{hideEditFragmentModal}\" class=\"btn btn-danger\">Dismiss</button>\r\n    </div>\r\n</Modal>\r\n\r\n\r\n<style>\r\n    .container {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n    }\r\n\r\n    .footer {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    button {\r\n        display: block;\r\n        margin-left: 5px;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    .modifiers {\r\n        display: grid;\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-template-columns: repeat(4, 1fr);\r\n    }\r\n\r\n    .modifier-header {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n\r\n    .modifier-body {\r\n        font-weight: bolder;\r\n        flex: 1 1 auto;\r\n        min-height: 1px;\r\n        padding: 5px;\r\n    }\r\n\r\n    .modifier-footer {\r\n        padding: 5px;\r\n        background-color: rgba(0, 0, 0, .03);\r\n        border-top: 1px solid rgba(0, 0, 0, .125);\r\n    }\r\n</style>\r\n","<script>\r\n    import {onMount} from 'svelte'\r\n    import {modalStates, routineState} from './stores';\r\n    import {calculateRoutineDifficulty} from './calculations'\r\n    import {showFragmentModal, showEditFragmentModal} from './modals_visibility';\r\n    import FragmentModal from \"./FragmentModal.svelte\";\r\n    import ModifierModal from \"./ModifiersModal.svelte\";\r\n    import EditFragmentModal from \"./EditFragmentModal.svelte\"\r\n    import Fragment from './Fragment.svelte'\r\n\r\n    let fragmentModalVisibility\r\n    let modifierModalVisibility;\r\n    let editFragmentModalVisibility;\r\n    let inputHighDiffPatternModifier;\r\n    let routineUniqueModifiers;\r\n    let editingFragment;\r\n    let editingFragmentIndex;\r\n\r\n    let inputFile;\r\n    let inputName;\r\n    let inputType;\r\n    let inputCountry;\r\n    let inputCompetition;\r\n    let inputDate;\r\n\r\n    onMount(async () => {\r\n        routineUniqueModifiers = await fetch('./routine_unique_modifiers.json').then(res => res.json());\r\n    })\r\n\r\n    let modals = modalStates.subscribe(state => {\r\n        fragmentModalVisibility = state.fragmentModalVisibility;\r\n        modifierModalVisibility = state.modifierModalVisibility;\r\n        editFragmentModalVisibility = state.editFragmentModalVisibility;\r\n    })\r\n\r\n    let printForm = function () {\r\n        if (inputName.reportValidity() && inputType.reportValidity() && inputCountry.reportValidity() && inputCompetition.reportValidity() && inputDate.reportValidity()) {\r\n            window.print()\r\n        }\r\n    }\r\n\r\n    let editHighDiffPatternModifier = function () {\r\n        console.log($routineState);\r\n        if (inputHighDiffPatternModifier.checked) {\r\n            $routineState.unique_modifiers = [routineUniqueModifiers[0]]\r\n        } else {\r\n            $routineState.unique_modifiers = []\r\n        }\r\n        $routineState.mark = calculateRoutineDifficulty($routineState);\r\n    }\r\n\r\n\r\n    let removeFragment = function (index) {\r\n        $routineState.fragments = [...$routineState.fragments.slice(0, index), ...$routineState.fragments.slice(index + 1)]\r\n    }\r\n\r\n    let editFragment = function (fragment, index) {\r\n        editingFragment = fragment;\r\n        editingFragmentIndex = index;\r\n        showEditFragmentModal();\r\n    }\r\n\r\n    let saveDataset = function () {\r\n        let dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify($routineState));\r\n        let dlAnchorElem = document.getElementById('downloadAnchorElem');\r\n        dlAnchorElem.setAttribute(\"href\", dataStr);\r\n        dlAnchorElem.setAttribute(\"download\", `${$routineState.type}_${$routineState.country}_${$routineState.name}.asd`);\r\n        dlAnchorElem.click();\r\n    }\r\n\r\n    let loadFile = function () {\r\n        let reader = new FileReader();\r\n        let data;\r\n        reader.addEventListener('load', (event) => {\r\n            data = event.target.result;\r\n            routineState.set(JSON.parse(data));\r\n        });\r\n        reader.readAsText(inputFile.files[0]);\r\n    }\r\n</script>\r\n\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <label>Routine\r\n            <select bind:this={inputType} bind:value={$routineState.type} class=\"custom-select\" required>\r\n                <option disabled value>Choose...</option>\r\n                <option value=\"solo\">Solo</option>\r\n                <option value=\"duet\">Duet</option>\r\n                <option value=\"team\">Team</option>\r\n            </select>\r\n        </label>\r\n        <div>Load .asd file\r\n            <div>\r\n                <button on:click={()=>inputFile.click()} style=\"width: 100%\" class=\"btn btn-outline-primary\">Choose\r\n                    file...\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <input bind:this={inputFile} on:change={loadFile} type=\"file\" accept=\".asd\"\r\n               hidden>\r\n    </div>\r\n    <div class=\"row\">\r\n        <label>Country\r\n            <input bind:this={inputCountry} bind:value={$routineState.country} class=\"form-control\" type=\"text\"\r\n                   required>\r\n        </label>\r\n        <label>Name of the athlete or team\r\n            <input bind:this={inputName} bind:value={$routineState.name} class=\"form-control\" type=\"text\" required>\r\n        </label>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <label>Name of the competition\r\n            <input bind:this={inputCompetition} bind:value={$routineState.competition} class=\"form-control\" type=\"text\"\r\n                   required>\r\n        </label>\r\n        <label>Date\r\n            <input bind:this={inputDate} bind:value={$routineState.date} class=\"form-control\" type=\"date\" required>\r\n        </label>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div>\r\n            <label>Duration\r\n                <input bind:value={$routineState.duration} class=\"form-control\" disabled type=\"time\">\r\n            </label>\r\n        </div>\r\n        <div>\r\n            <label>Difficulty\r\n                <input bind:value={$routineState.mark} class=\"form-control\" disabled type=\"text\">\r\n            </label>\r\n        </div>\r\n    </div>\r\n    {#if $routineState.type}\r\n        <div class=\"row\">\r\n            <button on:click={saveDataset} class=\"btn btn-outline-primary\">Get .asd file</button>\r\n            <button on:click={printForm} class=\"btn btn-outline-primary \">Print form</button>\r\n        </div>\r\n        <div class=\"row-flex\">\r\n            <button on:click=\"{showFragmentModal}\" class=\"btn btn-primary\">Create new\r\n                fragment\r\n            </button>\r\n        </div>\r\n    {/if}\r\n    {#if $routineState.type === \"team\"}\r\n        <div>\r\n            <div class=\"form-check\">\r\n                <input bind:this={inputHighDiffPatternModifier} on:change={editHighDiffPatternModifier} id=\"team-unique\"\r\n                       type=\"checkbox\" class=\"form-check-input\">\r\n                <label for=\"team-unique\" class=\"form-check-label\">Hight level difficulty pattern\r\n                    changes\r\n                    (moving patterns, passing through patterns, close spaced, quick and sharp\r\n                    surface changes)\r\n                </label>\r\n            </div>\r\n        </div>\r\n    {/if}\r\n    <div class='fragments'>\r\n        {#each $routineState.fragments as fragment,id}\r\n            <Fragment on:click={()=>editFragment(fragment,id)}>\r\n                <div slot=\"header\">\r\n                    #{id+1}\r\n                </div>\r\n                <div slot=\"header\">\r\n                    {fragment.duration} sec.\r\n                </div>\r\n                <div slot=\"body\">\r\n                    {fragment.type}\r\n                </div>\r\n                <div slot=\"footer\">\r\n                    Diff.: {fragment.difficulty}\r\n                </div>\r\n                <div slot=\"footer\" on:click={()=>removeFragment(id)}>\r\n                    &times;\r\n                </div>\r\n            </Fragment>\r\n        {:else}\r\n            <div>\r\n                Program fragments will be here.\r\n            </div>\r\n        {/each}\r\n    </div>\r\n</div>\r\n\r\n{#if fragmentModalVisibility}\r\n    <FragmentModal/>\r\n{/if}\r\n{#if modifierModalVisibility}\r\n    <ModifierModal/>\r\n{/if}\r\n{#if editFragmentModalVisibility}\r\n    <EditFragmentModal fragment={editingFragment} index={editingFragmentIndex}/>\r\n{/if}\r\n\r\n<a id=\"downloadAnchorElem\" style=\"display:none\">&nbsp</a>\r\n\r\n<style>\r\n\r\n    .custom-file {\r\n        display: inline-block;\r\n        background: rgba(0, 0, 0, 0);\r\n        width: 100%;\r\n        height: calc(1.5em + .75rem + 2px);\r\n        padding: .375rem 1.75rem .375rem .75rem;\r\n        font-size: 1rem;\r\n        font-weight: 400;\r\n        line-height: 1.5;\r\n        color: #495057;\r\n        vertical-align: middle;\r\n        border: 1px solid #ced4da;\r\n        border-radius: .25rem;\r\n        -webkit-appearance: none;\r\n        -moz-appearance: none;\r\n        appearance: none;\r\n    }\r\n\r\n    input:disabled {\r\n        color: black;\r\n        background-color: deepskyblue;\r\n        font-weight: 800;\r\n    }\r\n\r\n    div {\r\n        text-transform: inherit;\r\n        text-align: inherit;\r\n        font-weight: inherit;\r\n    }\r\n\r\n    .container {\r\n        width: 40%;\r\n        margin-right: auto;\r\n        margin-left: auto;\r\n    }\r\n\r\n    .fragments {\r\n        display: grid;\r\n        grid-template-rows: repeat(3, 1fr);\r\n        grid-template-columns: repeat(3, 1fr);\r\n    }\r\n\r\n    .row {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-column-gap: 10px;\r\n    }\r\n\r\n    .row-flex {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n</style>","<script>\r\n    import {routineState} from \"../stores\"\r\n</script>\r\n\r\n<table class=\"collapse w-17\">\r\n    <thead>\r\n    <tr>\r\n        <th colspan=\"5\" style=\"width: 17cm; border: 1px solid black\">ARTISTIC SWIMMING DIFFICULTY FORM</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr>\r\n        <td class=\"text-left w-3\">EVENT:</td>\r\n        <td class=\"border text-left w-1 text-bold uppercase\">{$routineState.type}</td>\r\n        <td class=\"text-right w-3\">PLACE:</td>\r\n        <td class=\"border text-left w-5 text-bold\">{$routineState.competition}</td>\r\n    </tr>\r\n    <tr>\r\n        <td class=\"text-left w-3\">COUNTRY:</td>\r\n        <td class=\"border text-left w-1 text-bold uppercase\">{$routineState.country}</td>\r\n        <td class=\"text-right w-3\">DATE:</td>\r\n        <td class=\"border text-left w-5 text-bold\">{$routineState.date}</td>\r\n    </tr>\r\n    <tr>\r\n        <td class=\"text-left w-3\">NAME:</td>\r\n        <td class=\"border text-left w-5 text-bold\">{$routineState.name}</td>\r\n        <td class=\"text-right w-3\">Start List №</td>\r\n        <td class=\"border text-left w-5 text-bold\"></td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<style>\r\n    .uppercase{\r\n        text-transform: uppercase;\r\n    }\r\n\r\n    .text-right {\r\n        text-align: right;\r\n    }\r\n\r\n    .text-bold {\r\n        font-weight: bold;\r\n    }\r\n\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n\r\n    .w-1 {\r\n        width: 1.5cm;\r\n    }\r\n\r\n    .w-3 {\r\n        width: 3cm;\r\n    }\r\n\r\n    .w-5 {\r\n        width: 5.5cm;\r\n    }\r\n\r\n    .w-17 {\r\n        width: 17cm;\r\n    }\r\n\r\n    .collapse{\r\n        border-collapse: collapse;\r\n    }\r\n</style>","<script>\r\n    import {routineState} from \"../stores\"\r\n</script>\r\n\r\n<table class=\"w-5 m-default collapse\">\r\n    <thead>\r\n    <tr>\r\n        <td class=\"w-3 border text-bold\">TOTAL DIFF:</td>\r\n        <td class=\"w-2 border\">{$routineState.mark}</td>\r\n    </tr>\r\n    </thead>\r\n</table>\r\n\r\n<style>\r\n    .text-bold {\r\n        font-weight: bold;\r\n    }\r\n\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n\r\n    .w-2 {\r\n        width: 2.5cm;\r\n    }\r\n\r\n    .w-3 {\r\n        width: 3cm;\r\n    }\r\n\r\n    .w-5 {\r\n        width: 5.5cm;\r\n    }\r\n\r\n    .collapse{\r\n        border-collapse: collapse;\r\n    }\r\n</style>","<script>\r\n    import {routineState} from \"../stores\"\r\n\r\n    export let modifier\r\n</script>\r\n\r\n<tr>\r\n    <td colspan=\"2\" class=\"border\">{modifier.category}</td>\r\n    <td colspan=\"2\" class=\"border\">{modifier.name}</td>\r\n    <td class=\"border\">{modifier.values[$routineState.type]}</td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n</tr>\r\n\r\n<style>\r\n    .text-bold{\r\n        font-weight: bold;\r\n    }\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n    .capitalize{\r\n        text-transform: capitalize;\r\n    }\r\n</style>","<script>\r\n    import Modifier from \"./Modifier.svelte\"\r\n    export let fragment\r\n</script>\r\n\r\n<tr>\r\n    <td class=\"border shade text-bold\">{fragment.startTime}</td>\r\n    <td class=\"border shade text-bold\">{fragment.endTime}</td>\r\n    <td class=\"border shade text-bold\">{fragment.duration} sec.</td>\r\n    <td class=\"border shade capitalize text-bold\">{fragment.type}</td>\r\n    <td class=\"border shade text-bold\">{fragment.difficulty}</td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n    <td class=\"border\"></td>\r\n</tr>\r\n{#if fragment.type===\"hybrid\"}\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td class=\"border capitalize text-bold\">Level</td>\r\n        <td class=\"border capitalize\">{fragment.level}</td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td class=\"border capitalize text-bold\">Movements</td>\r\n        <td class=\"border capitalize\">{fragment.numberOfMovements}</td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td></td>\r\n        <td></td>\r\n        <td class=\"border capitalize text-bold\">Basic Mark</td>\r\n        <td class=\"border capitalize\">{fragment.legs} legs</td>\r\n        <td class=\"border\">{fragment.basicMark}</td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n        <td class=\"border\"></td>\r\n    </tr>\r\n{/if}\r\n{#each fragment.modifiers as modifier}\r\n    <Modifier modifier={modifier} />\r\n    {:else}\r\n    Fragment modifiers will be here\r\n{/each}\r\n\r\n<style>\r\n    .text-bold{\r\n        font-weight: bold;\r\n    }\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n    .capitalize{\r\n        text-transform: capitalize;\r\n    }\r\n    .shade{\r\n        background-color: #c0c0c0;\r\n    }\r\n</style>\r\n","<script>\r\n    import {get} from 'svelte/store'\r\n    import {routineState} from \"../stores\"\r\n    import Fragment from \"./Fragment.svelte\"\r\n\r\n    let program = Object.assign({},get(routineState));\r\n    console.log(program);\r\n</script>\r\n\r\n<table class=\"collapse w-17 m-default\">\r\n    <thead>\r\n    <tr>\r\n        <th class=\"w-1 border\">Start</th>\r\n        <th class=\"w-1 border\">End</th>\r\n        <th class=\"w-2 border\">Duration</th>\r\n        <th class=\"w-5 border\">Description</th>\r\n        <th class=\"w-1 border\">MARK</th>\r\n        <th colspan=\"3\" class=\"w-3 border\">Expert</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n        {#each $routineState.fragments as fragment}\r\n            <Fragment fragment={fragment}/>\r\n        {:else}\r\n            <tr>\r\n                <td colspan=\"10\">Fragments of your program will be here</td>\r\n            </tr>\r\n        {/each}\r\n    </tbody>\r\n</table>\r\n\r\n<style>\r\n    .border {\r\n        border: 1px solid black;\r\n    }\r\n\r\n    .w-1 {\r\n        width: 1.5cm;\r\n    }\r\n\r\n    .w-2 {\r\n        width: 2.5cm;\r\n    }\r\n\r\n    .w-5 {\r\n        width: 5cm;\r\n    }\r\n\r\n    .w-17 {\r\n        width: 17cm;\r\n    }\r\n\r\n    .collapse{\r\n        border-collapse: collapse;\r\n        word-break:break-all\r\n    }\r\n</style>","import App from './App.svelte';\n\nvar app = new App({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","get_store_value","value","_","component_subscribe","component","callback","$$","on_destroy","push","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","set_store_value","ret","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_data","set_input_value","input","set_style","key","important","style","setProperty","select_option","select","option","__value","selected","select_value","selected_option","querySelector","current_component","set_current_component","get_current_component","Error","onMount","on_mount","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","call","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","p","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","ready","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","modalStates","fragmentModalVisibility","modifierModalVisibility","editFragmentModalVisibility","routineState","country","competition","date","mark","duration","fragments","unique_modifiers","fragmentState","startTime","endTime","basicMark","level","numberOfMovements","legs","direction","support","rotations","difficulty","modifiers","calculateHybridLevel","console","log","Number","calculateFragmentDuration","startTimeInSeconds","split","calculateFragmentBasicMark","durationType","toFixed","calculateFragmentDifficulty","programType","modifiersArray","item","unique","uniqueModifiersArray","multiplier","multipliers","modifiersMark","reduce","accumulator","currentValue","values","uniqueModifiersMark","multipliersArray","calculateRoutineDifficulty","routine","overallDifficulty","calculateRoutineTime","program","overallTime","seconds","String","padStart","floor","hideModifierModal","state","showModifierModal","hideFragmentModal","showFragmentModal","hideEditFragmentModal","z_index","dispatch","close","modal","previously_focused","activeElement","focus","querySelectorAll","tabbable","n","tabIndex","shiftKey","preventDefault","inputType","inputStartTime","inputEndTime","inputMovements","inputLegs","inputDirection","inputSupport","inputRotations","get","$fragmentState","modals","removeModifier","modifier","findIndex","el","$routineState","reportValidity","fetch","res","json","addModifier","inputHighDiffPatternModifier","routineUniqueModifiers","editingFragment","editingFragmentIndex","inputFile","inputName","inputCountry","inputCompetition","inputDate","removeFragment","editFragment","window","print","checked","dataStr","encodeURIComponent","JSON","stringify","dlAnchorElem","getElementById","click","reader","FileReader","result","parse","readAsText","files","id","category","body"],"mappings":"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"}